 1.BeanNotOfRequiredTypeException 异常：but was actually of type 'com.sun.proxy.$Proxy17' 
	JDK动态代理和CGLIB字节码生成的区别？ 
		* JDK动态代理只能对实现了接口的类生成代理，而不能针对类 			//代理类实现了目标类的接口，运行时根据实际的类型调用方法，是动态代理
			通过java反射的方式来实现代理的
		* CGLIB是针对类实现代理，主要是对指定的类生成一个子类，覆盖其中的方法 //代理类直接继承了目标类，编译时就已经确定的方法的实现，是动态代理	
			通过方法拦截来实现的
			CGLIB原理：动态生成一个要代理类的子类，子类重写要代理的类的所有不是final的方法。
			在子类中采用方法拦截的技术拦截所有父类方法的调用，顺势织入横切逻辑
	Spring通过注解管理hibernate的事务使用AOP进行，并且是基于代理的AOP方式，
		在Spring中，默认是用被@Transaction注解的类的接口来做代理的即JDK动态代理
	解决
		1@EnableAspectJAutoProxy(proxyTargetClass=true) 使用CGlib代理
		2.或用目标类的父类接口替代目标类声明变量	//在JDK代理下用目标类的接口声明变量
		
	Spring管理Hibernate事务过程
		基于Hibernate的DAOimp不进行transaction的操作，仅仅是通过SessionFactiory取得Session进行数据库访问
		Spring通过AOP用代理的方式去形成一个DAOimp的代理类，顺势将一个Transaction织入代理类，
		当代理类调用Session操作数据时，Spring的TransactionManager通过SessionFactory取得一个当前Session的Transaction对象，
		并把这个对象赋值给代理类的Transaction，每当DAOimp调用方法，方法会被代理类拦截并执行代理类的对应的方法，
		同时Spring的TransactionManager管理着Transaction，执行beginTransaction()开始事务，commit（），rollback（）；
		
2.org.hibernate.StaleStateException: Batch update returned unexpected row count from update: 0 actual row count: 0 expected: 1
	可能是原本表中无version，当hibernate删除这些没有version的记录时出现该错误，因hibernate根据version来进行并发控制，select version from table where id=?