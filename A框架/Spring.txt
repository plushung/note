体系结构：包括
	核心容器（Core Container）
		核心容器由核心，Bean，上下文和表达式语言模块组成
			核心提供基本组成部分，包括 IoC 和依赖注入功能
			Bean模块用工厂模式实现
			上下文它是访问定义和配置的任何对象的媒介。
			
	数据访问/集成（DataAccess/Integration）
		包括 JDBC，ORM，OXM，JMS 和事务处理模块
	Web
		由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成
	测试模块
		Test
	其他：
		AOP，Aspects，Instrumentation，Web


Spring IoC 容器
	容器将创建对象，连接对象（DI），配置对象，管理对象的整个生命周期从创建到销毁
	使用依赖注入，把对象组装成组件（Bean）

	BeanFactory 容器
		它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean
		采用延迟加载的方式创建Bean，即在需要某个Bean时才实例化Bean
		支持BeanPostProcessor，BeanFactoryPostProcessor，不过要手动创建
	ApplicationContext 容器
		COntext是spring的核心
		包含BeanFactory所有功能，但Bean的加载方式是急加载，在容器启动时，就把全部Bean都实例化出来
		另外增加了企业所需要的功能，比如，从属性文件从解析文本信息和将事件传递给所指定的监听器
		支持BeanPostProcessor，BeanFactoryPostProcessor，在ApplicationContext上是自动注册好的
		派生	
			WebApplicationContext	 	//用于web应用的ApplicationContext

	bean定义 @scope scope 指定作用域
	    基于 XML 的配置文件:<bean id="" class=""></bean>
	    基于注解的配置:启用<context:component-scan>,扫描基于注解的Bean
			       @Component：一个泛化的概念，表示一个组件（Bean），可作用在任何层次
   			       @Controller：用于对Controller实现类进行标注，目前该功能与Component相同
   			       @Repository：用于对DAO实现类进行标注
    			   @Service：用于对Service实现类进行标注，目前该功能与Component相同,作用和与Bean同
	    基于 Java 的配置 :@Configuration 的注解类表示这个类可以作为 bean 定义的来源
				@Bean 的注解方法将返回一个对象，注册在 Spring 应用程序上下文中

Spring 依赖注入
	依赖注入有助于把这些类装配在一起，同时保持他们独立。 
	
	
	注入方式：
		基于构造函数
			<constructor-arg type="int" value="2001"/>注入直接值
			<constructor-arg  type="Integer" ref="beanId"/>注入引用的bean
		基于setter方法
			通过属性的setter方法设置值，name指定要设置的属性名
			<property name="spellChecker" ref="spellChecker"/>
			<property name="spellChecker" value="spellChecker"/>
	注入集合：
		<set>,<list>,<map>,<props>
		
	运行时注入属性
		0在配置类中声明属性源@PorpertySource(“pathurl”)
		1.通过Spring的Environment Bean从属性文件中取得属性值
			1在配置类中注入一个Environment 的bean，evn
			2在要运行时注入属性值得地方用evn.getProperty("porpertyName","defaultValue"),取得属性值,没有就用defaultValue
		或
		1.通过属性占位符${}或SpEl占位符#{}注入属性值
			1在配置类声明一个PorpettySourcePlaceholderConfigure bean，并且加上static，因为要在configure类加载时就初始化，用以解析占位符
			2在需要注入值的地方${porpertyName}或#{systemproperties[“porpertyName”]}
				# #引用Bean#{beanId}，引用Bean的方法#{beanName.method()}，引用Bean的属性#{beanName.Field}
				# #使用类#{T(Class)}
			!!! ${}可以用在任何地方，在java类中，xml文件中
			!!! 自动装配时配合@Value()使用，作用像@Autowrie
		
		2程序运行时再注入值
		
Spring Beans 自动装配
	xml:<bean autowire="byName/byType/constructor">
	
Spring 基于注解的配置
	@Required 注释应用于 bean 属性的 setter 方法,表示必需配置属性值
	@Autowired 用于构造函数，Setter 方法，属性,按类型注入
	@Resource 按名称注入
	@Qualifier 注释，指定要注入的BeanId
	JSR-250 注解
		@PostConstruct， @PreDestroy 相当于initMethod和destoryMethod，用于方法上
		@Resource（name=“beanid”）=@autowire+@qualifier

spring的事件处理
	当加载 beans 时，ApplicationContext（上下文） 发布（产生）某些类型的上下文事件	
		ContextRefreshedEvent
		ContextStartedEvent 	使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布
		ContextStoppedEvent		使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，该事件被发布
		ContextClosedEvent		close() 停止 ApplicationContext 时，发布这个事件
		RequestHandledEvent
	
	监听上下文事件
		ApplicationListener 接口用于监听上下文（context）事件, 只有一个方法onApplicationEvent()，处理事件

	把ApplicationListener配置成bean，context发布事件时，Listener Bean监听到并处理

Spring AOP
	跨一个应用程序的多个点的功能被称为 横切关注点 ，这些横切关注点在概念上独立于应用程序的业务逻辑。
	Aspect（方面）:独立于业务逻辑的功能模块
		如日志记录模块、审计模块、声明式事务模块、安全性模块和缓存模块等

	Advice(通知)：功能模块里待执行的具体方法

	Pointcut(切点)：业务逻辑程序上的某个位置，通常是某个方法
		在程序运行到切点时，在合适的时机使用通知
		
	通知（Advice）的类型：
		前置通知	before
		后置通知	after
		返回后通知	after-returning
		抛出异常后通知	after-throwing
		环绕通知	around

	AOP的配置实现
		Spring默认使用java的JDK代理
		或
		用增强型的代理框架Aspetj
			classpath下要包含以下AspectJ 库文件
				aspectjrt.jar
				aspectjweaver.jar
				aspectj.jar
				aopalliance.jar

			xml方式：(要先声明一个Aspect的Bean)
				<aop:config>
					<aop:aspect>
						<aop:pointcut>
						<aop:before>
				声明切面:在<aop:config>标签里配置
					 <aop:aspect id="myAspect" ref="aBean">
					ref引用一个bean，用来作切面对象

				声明切点:在<aop:aspect>标签里配置
					<aop:pointcut id="businessService" 
						expression="execution(* com.tutorialspoint.Student.getName(..))"/>

				声明通知：在<aop:aspect>标签里配置
					<aop:before pointcut-ref="businessService"
						method = "adviceMethod">
					ref 引用一个切点businessService，在该切点调用该aspect的一个method：adviceMethod
			注解方式：
				xml配置文件要声明以下标签以启用@AspectJ
				<aop:aspectj-autoproxy/>或@EnableAspectJAutoProxy
				声明切面:
					@Aspect
					public class AspectModule｛｝
				
				声明切点:
					@Pointcut("execution(* com.xyz.myapp.service.*.*(..))")
					private void businessService() {}
				
				声明通知:
					@After("businessService()")
					public void afterAdvice()
					@Around("recordLog()")//around通知有一个ProceedingJoinPoint参数
						public void around(ProceedingJoinPoint pjp)

Spring JDBC 框架
	JdbcTemple类:负责处理连接数据库时的所有的低层细节
		JdbcTemplate 类的实例是线程安全配置的

	存储过程（Stored Procedure）：
	是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，
	经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。
	存储过程是数据库中的一个重要对象。

Spring 事务管理（commit，rollback。。。）
	事务的四个关键属性说成是 ACID
	原子性
	一致性
	隔离性
	持久性

	用SQL执行一个事务的流程:
		使用 begin transaction 命令开始事务。
		使用SQL执行CRUD操作
		所有SQL操作都成功则commit or rollback
	
	局部事物 vs. 全局事务

	Spring 支持两种类型的事务管理:
		编程式事务管理 ：这意味着你在编程的帮助下有管理事务。这给了你极大的灵活性，但却很难维护。
			将事务管理与业务代码DAO编写在一块
    	声明式事务管理 ：(通过aop实现)
			这意味着你从业务代码中分离事务管理。你仅仅使用注释或 XML 配置来管理事务。
			从业务代码中分离事务管理，仅仅使用注释或 XML 配置来管理事务，是非侵入式，不会影响业务逻辑的实现。

	Spring 支持使用 Spring AOP 框架的声明式事务管理。声明式事务管理比编程式事务管理更可取
	即将事务模块声明为Aspect，运用AOP的方式管理事务      @Transaction

	Spring 事务抽象：
		PlatformTransactionManager 接口
			TransactionDefinition 是在 Spring 中事务支持的核心接口
			TransactionStatus 接口为事务代码提供了一个简单的方法来控制事务
	
	1定义事务管理器TransactionManager的bean
		<bean name="managerneme" class="hibernatetransactionmanager"> 
		Spring的支持的事务管理器
			DataSourceTransactionManager
			HibernateTransactionManager
			JtaTransactionManager
	2声明式事务：
		一种为通过使用Spring的<tx:advice transaction-manager="managerneme">定义事务通知与实现通知的事务管理器
			应用通知
				<aop:config>
					<aop:pointcut exeception="execition(*.*.method)">	//定义切点（哪里）
					<aop:advisor advice-ref="txmanager">			//引用通知（做什么）,引用事务管理器作切点上的通知
		或	
		另为一种通过@Transactional实现事务管理实现，
		要在cfg.xml添加<tx:annotation-driven transaction-manager="managername"/>开启注解方式的声明式事务
		Spring会自动在@Transactional上通过AOP的方式将事务管理器用作通知
	3.选择事务传播属性propegation
		
	continue。。。。。。。。。。。。。。。。。。。。。。。。。

	
	ORM实体管理
		
		JPA:
			1.EntityManagerFactory中取得EntityManager
			2.EntityManager执行事务
			JPA实体管理分为 应用程序管理类型 和 容器管理类型
				应用程序管理类型的EntityManagerFactory
					通过PresistenceProvider的createEntityManagerFactory()取得
				容器管理类型的EntityManagerFactory
					通过PresistenceProvider的createContainerEntityManagerFactory()取得
		
			若通过Spring管理JPA
				使用Spring提供的FactoryBean生成EntityManagerFactory
				Spring提供的这两个类封装了PresistenceProvider，为我们创建EntityManagerFactory
				JPA应用程序类管理器（Spring作为应用管理实体）
					Spring的LocalEntityManagerFactoryBean产生EntityManagerFactory
					配置LocalEntityManagerFactoryBean时要指定persistence.xml
				JPA容器类管理器（Spring作为容器管理实体）
					Spring的LocalContainerEntityManagerFactoryBean产生EntityManagerFactory
					配置LocalContainerEntityManagerFactoryBean时要指定使用哪中JPA的实现
					
		Hibernate:
			1.SessionFactory中取得Session
			2.Session执行持久化操作
			
			hibernate用SessionFactory管理持久化实体，一个程序应该只有一个
			
			若通过Spring管理Hibernate
				使用Spring提供的FactoryBean生成SessionFactory
				Spring的LocalSessionFactoryBean为我们提供SessionFactory，它封装了SessionFactory，并作配置
				LocalSessionFactoryBean
					用于以xml定义映射的持久化类的配置
				AnnotationSessionFactoryBean
					用于以注解定义映射的持久化类的配置
					
		@Repository
			1用于注解基于ORM（Hibernate或JPA）的DAO类，是Spring的构造性注解，
			像Controller，可以被组件扫描到，其里面发生的异常可被Spring框架捕获
			2.被注解的bean产生的异常会被转换为Spring的同一数据访问异常，DAO_Access_exception
			由Spring统一处理(无论是用Hibernate还是JPA，统统变为Spring数据访问异常)
			！！！要配置一个前置处理器进行转换，
			
		@Transactional
			是使用Spring AOP实现的
			进行管理事务(commit,rollback)，所有DAO方法都在事务Context上执行
			
			context上下文，或者程序环境，是一段程序运行时所依赖的环境，
			例如程序的运行要依赖环境中的某些变量
		JPA&&Hibernate
			EntityManagerFactory====SessionFactory====DriverManager
			EntityManager====Session=====connection
			persistence.xml====hibernate.cfg.xml=====“username=***”