索引
	按实现方式
		通过建立b+树来索引
		聚集索引
			1 只能有一个，如主键索引或组合索引
			2 叶子节点的地址中就是实际数据行的地址。   即 node=data
			3 聚集索引的叶子节点上的逻辑顺序和实际在硬盘上的物理顺序一致。
			4 修改聚集索引列会导致索引重建，并且会将硬盘上的数据重排列，即硬盘上的数据顺序会改变。
		非聚集索引
			1 普通字段上可以建立非聚集索引，如普通索引，唯一索引
			2 叶子节点不保存实际的数据行，只保存到数据行所在的数据块的地址指针 即 node=&data
			3 修改非聚集索引列会导致索引重建，但不会将硬盘上的数据重排列，即硬盘上的数据顺序不会改变。
	按使用方式
		唯一索引
			索引的字段不能有重复值
		普通索引
			就只是在一个字段上建立索引，数据可重复
		主键索引
			作为主键建立索引，非空且唯一
		
	组合索引
		使用最左前缀原则
		
	建立组合索引可加快查询，解决慢查询
		根据最左前缀匹配原则，组合索引会的顺序从左开始对索引字段进行索引。直到遇到某个索引字段范围查询。就停止索引。
		
	explain语句 ： 用于分析查询是否用到索引
		explain显示了mysql如何使用索引来处理select语句以及连接表。可以帮助选择更好的索引和写出更优化的查询语句。
		在select 上直接加上即可
	
删除数据
	delete：删除部分行
	truncate :删除所有行，保留表
	drop：删除整个表
		
sql优化
	1.以主键为where为条件查询时 不要用!=,<>操作符，in,not in语句，避免出现!=,or,between,等东西，like语句 否则，会放弃索引改用全表扫描
	2.不要在where用函数，或对字段进行表达式操作。不要n/2=100，改为n=2*100
	3.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引
	4.避免用游标
	5.用Where子句替换HAVING子句：
	6.用EXISTS替代IN、用NOT EXISTS替代NOT IN：
	7.用UNION替换OR (适用于索引列)：
	8.不要让索引列无可比较(is null,is not null)或两边范围比较（!=,between,<>,in）
	9.对 where,on,group by,order by 中出现的列使用索引
	
安全
	防止sql注入
		使用PreparedStatement语句，使用预编译查询
		用正则表达式过滤匹配sql语句的参数	
		