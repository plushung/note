多线程：
	指的是这个程序（一个进程）运行时产生了不止一个线程.

并发：
	通过cpu调度算法，让用户看上去同时执行，实际上从cpu操作层面不是真正的同时。
	并发用于提高在单个cup上运行的程序的性能

线程安全：
	一段代码在并发的情况下执行，经过多线程使用，线程的调度顺序不影响结果。线程不安全就意味着线程的调度顺序会影响最终结果。
线程状态
	新建new
	运行Running
	等待waiting
	阻塞Blocking
	结束Terminated
同步：
	通过人为的控制和调度，保证共享资源的多线程访问成为线程安全，来保证结果的准确。在代码方法上加入synchronized关键字。
	方法前用synchronized关键字，synchronized关键字还可以用于方法中的某个区块中

阻塞
	其他阻塞：		//join，sleep，IORead/IOwrite	
		运行的线程执行sleep()或join()方法，或者发出了I/O请求时，JVM会把该线程置为阻塞状态。
		sleep()时间结束或被打断，join()中断,IO完成都会回到Runnable状态,等待系统调度运行

	等待阻塞：		//lock.wait()
		调用wait()，使该线程处于等待池,直到notify()/notifyAll()，线程被唤醒被放到锁定池，释放同步锁使线程回到可运行状态

	同步阻塞：		// synchronize
		运行的线程在获取对象的同步锁时，若该同步锁被别的线程占用，则JVM会把该线程放入锁池中。
		进入可运行状态后等待cpu调度进入运行状态Running
		yield方法可以让一个running状态的线程转入runnable。
		
守护线程(后台线程)
	守护线程总是在其他非守护线程结束后就会结束
	Thread对象的setDaemon()将线程设置为后台线程
	

中断线程
	在线程被阻塞时中断线程
	
	不可中断阻塞
		synchronized同步阻塞与IO阻塞不能响应中断
	解决不可中断阻塞
		使用Locks来控制临界区，用NIO来做IO操作，他们都能响应中断
		
	interrupt():
		若当前线程被阻塞则中断当前线程,将线程的中断标志设为true
		在wait(),sleep(),t.join()时，被阻塞线程运行interrupt(),即可中断阻塞状态，并在阻塞出抛出中断异常
		当捕获了中断异常后，线程的中断标志会被清除，即设置为false
	isinterrupted:判断当前线程是否中断
	interrupt()检查当前线程是否发生中断，并清除中断状态
	中断是一个状态！interrupt()方法只是将这个状态置为true而已。
	
线程优先级
	线程优先级将线程的重要性传递给调度器，优先执行优先级高的线程
	通过thread对象的setPriority(int ..)设置优先级，JDK有10种优先级
	
线程行为
	wait() 与 notify/notifyAll 方法必须在同步代码块中使用
	线程等待：
		Object类中的wait()方法，wait()也会让当前线程释放它所持有的锁
		导致当前的线程等待，直到其他线程调用此对象的 notify() 方法或 notifyAll() 唤醒方法
		因为wait需释放锁，所以必须在synchronized中使用（没有锁定则么可以释放？没有锁时使用会抛出	IllegalMonitorStateException（正在等待的对象没有锁）

	线程唤醒：
		Object类中的notify()方法，唤醒在该对象的等待池中的线程

	线程让步：
		Thread.yield()
		转让cpu控制权，让别的具有相同优先级的就绪状态线程运行，但并不保证会被采纳

	线程睡眠：
		public static Thread.sleep() 
		暂停一段时间
	　　　　
	线程加入：
		public join()
		在一个线程中调用其他线程otherthread.join(),将等其他线程执行完后或被中断才继续本线程。即直到otherthread.isAlive()为false

线程捕获异常
	在某条线程中抛出未捕获的异常时，该异常不会不能被其他任何线程捕获到，只能有线程自己处理自己的异常
	异常处理器UncaughtExceptionHandler
		处理线程内的未捕获异常
		实现该接口，然后调用Thread对象的setUncaughtExceptionHandler()方法设置异常处理器
		
同步
	synchronize控制同步临界区的访问		//link：jvm内存模型
		线程运行到同步临界区时，
		若获得了锁，则从内存中取回变量的值，存储到线程的缓存中，
		释放锁时再将同步块中的变量写到内存中，保证可见性 	
		线程取得锁期间执行的操作为原子操作，保证操作的原子性
		
	基于对象监听器的同步及等待
		synchronized修饰:
			类方法(Class对象作锁)，方法(实例对象作锁)，同步块(可以指定任意对象作锁，用到对象头的监听器)
			构造方法不能使用synchronized关键字

		java中每个对象有一个监听器与之关联，哪条线程先锁住控制临界区的那个对象的监听器，就可以运行它所控制的那段代码。
		监听器是互斥的，只能由一条线程锁住，

		synchronized(obj){} //obj的锁控制着同步块，谁拿到这个锁谁就可以运行它所控制的那段代码。
			synchronized 会指定把obj锁定，当有Thread访问同步块时，要先获得该obj对象锁，否则被阻塞，直到obj对象锁被其他Thread释放。
			obj必需是多个Thread所访问到的同一个对象，Threads用同一把锁，同步块才能正常运作。	
			
		wait（）会使线程释放获得的锁（线程放弃该锁）,进入锁的等待池 ;
			lock.notify() 唤醒等待该对象监听器的一条线程，使得等待池的一个线程进入锁池，等待获得锁，回到调用wait的现场

		sleep()/join(),不会释放线程获得的锁
			so在同步块里用join会造成死锁
	
	valitile变量
		volatile修饰的变量 [ 不允许线程内部缓存变量和指令重排序 线程间具有可见性]，即直接读写主内存
			volatile关键字本身就包含了禁止指令重排序的语义（指令执行的有序性）
				volatile变量的赋值操作指令不会因指令重排序而提前或推迟执行
			volatile变量对所有线程具有可见性
				volatile变量被使用时立即从主存刷新取得变量值。
				volatile变量被赋值后，立即将新值同步到主内存。
				而普通变量在使用时从主存读取的值可能还是旧值，在赋值时，何时将线程缓存中的新值同步到主内存是不能确定的。
			volatile变量不能保证运算的原子性
				a++是非原子操作，线程读并写变量值期间，可能存在其他线程对变量的读写操作
		作用:
			保证变量的可见性(立即同步主内存，其他线程可见)与有序性(禁止JVM对变量的操作指令重排序，确保操作按顺序执行)
			用于读取和赋值时是安全的，但进行运算并赋值时是不安全的
			当需要单独的一个变量作条件控制被多线程访问的程序，并在只对变量赋值来改变条件时，用volatile变量
			例如：用作while（）的条件，通过给volatile变量赋值改变控制while的执行
			
		volatile :在类的属性声明中使用
			修饰被不同线程访问和修改的变量，用于变量被改变后要立即可见的场景，
			如根据条件执行while，条件必须在while是最新的状态

		volatile 的读性能消耗与普通变量几乎相同，但是写操作稍慢
		
		
		
	volatile、synchronized 和 final 保证变量的可见性
	volatile 和 synchronized 保证线程每代码执行的有序性，代码串行执行。
	synchronized 中和在 lock、unlock 中操作保证操作原子性。或使用atomic类作变量保证操作原子性
	

		可见性：		//强调变量读写时与主内存的立即同步
			是指线程对变量的读写的可见性，一个线程修改的状态对另一个线程是一定可见的。也就是一个线程修改的结果。另一个线程马上就能看到。
			变量的修改会被马上同步到内存，不必等到方法结束才将变量值同步到主内存

		原子性(原子操作)：	//对一个变量的读取并写入时不能有其他线程对统一变量进行操作
			一个不可分割的操作叫原子操作。：a++ 由a+1和a=a+1俩步操作组成，非原子操作，
			高并发操作a++时，会出错

		有序性:
			程序串行执行。保证对代码的执行顺序按照编写顺序执行的，使JVM不会对操作指令的执行顺序重排序

		缓存变量		//link:jvm内存模型
			为提升性能，jvm会缓存变量到线程的工作内存中，将线程变量缓存在jvm的寄存器上或cpu的寄存器上
			volatile变量不会被缓存，直接读写内存

	死锁,活锁,饿死
		死锁:
			线程1的运行需要线程2持有的锁，而线程2的运行需要线程1持有的锁，
			结果，线程1等待线程2的锁，线程2等待线程1的锁，永远互相等待，造成死锁
			
			解决死锁
				1.防止循环等待
				2.加锁顺序
					所有所有线程以同样的顺序对资源加锁
				3.加锁时限
					为加锁的资源添加时限
				4.死锁检测
				
		活锁：
			线程占用锁后总是重复运行一些不能结束的操作，像while(ture),使得线程占用锁一直运行却作无用功
		饿死:
			总是有高优先级的线程在运行，而使得低优先级的线程得不到运行的机会

线程交互协作
	等待和通知处理线程协作
		wait()：使持有锁的线程进入等待池等待
		notify()：使锁的等待池中的线程进入锁池，等待获得锁去执行
		notifyAll():使锁的等待池中的所有线程进入锁池，等待获得锁执行
	
	同步队列解决线程协作
		果酱奶油吐司制作与消费P715
		使用BlockingQueue解决生产者与消费者问题，因其是线程安全的，所以不用synchronized同步也能被多线程并发访问
		其控制并发访问的方式是加ReentrantLock，读写时都用ReentrantLock
		LinkedBlockingQueue，ArrayBlockingQueue，SynchronousQueue，PriorityBlockingQueue
		
		PriorityBlockingQueue
			在优先队列上加上并发访问时阻塞的功能
		LinkedBlockingQueue
			默认容量动态增加无限制，存在时间最长的元素先出列（链表的头结点）FIFO ，若无元素则用Condition的await阻塞线程
		ArrayBlockingQueue
			容量给定，公平模式下使用队列的线程顺序遵循FIFO、非公平模式下使用队列的线程顺序不指定，若无元素则用Condition的await阻塞线程
	
	线程间通过管道通信
		PipeWriter/PipeReader与PipeInputStream/PipeOutputStream
			使线程间建立通信管道进行消息交流，一个输入Pipe只连接一个输出Pipe
		输入pipe 
			read()
				读取字符流，或字节流，若无数据可读，则阻塞
		输出pipe 
			write()
				写数据到Pipe中，不会阻塞
	生产者与消费者问题
	
线程局部变量
		口口口口口口口口口口口口口口口口口口口口每条线程使用一个口存储
	ThreadLocal<T> 
		定义一个存储线程变量的类，存储当前线程存入的值。每条线程存储与获取变量时，总会取得当前线程对应的那个值
		每条使用该类存储数据的线程都会分配到一个属于自己的存储空间来存储本线程可见的数据
	set()
		存入线程局部变量
	get()
		取得当前线程的局部变量，若线程的局部变量值不存在，则调用initialValue的值
	remove()
		移除ThreadLocal中所有线程额局部变量
	initialValue()
		初始化ThreadLocal,并赋null
	
定时器
	Timer()
		定时器，定期执行定时任务
	TimeTask()
		定时任务，是Runnable的一个抽象类

同步线程
	时多条线程在同一时间开始运行
	CountDownLatch
	CyclicBarrier
	

并发工具类	java.util.concurrent.* 	//为了不用synchronized来处理并发访问，提高性能
	其里面的Lock锁，atomic都是建立在CAS上的
	什么是CAS		//像hibernate通过version来加乐观锁一样  比较新旧？赋值更新：啥都不做
		CAS，Compare and Set即比较并交换。 java.util.concurrent包借助CAS实现了区别于synchronized同步锁的一种乐观锁。
		CAS有3个操作数：内存值V，旧的预期值A，要修改的新值B。
			V=V.equit(A)?B:V
		CAS的关键点在于，系统在硬件层面保证了比较并交换操作的原子性，处理器使用基于对缓存加锁或总线加锁的方式来实现多处理器之间的原子操作。
		ABA问题
			若一个变量由A变成B，再由B变成A，CAS的方法会认为变量的值无变化。
			解决:
				通过版本号来进行CAS，像hibernate通过version来对实体加乐观锁一样
				实现类:AtomicStampedReference
		使用场合
			1.CAS不适合竞争十分频繁的场景。
			2.CAS只能保证共享单一atomic类并发访问的原子性，当有多个共享的atomic被并发访问时，只能加同步锁访问
	乐观锁
		乐观锁就是，每次不加锁而是假设没有冲突而去完成某项操作，如果因为冲突失败就重试，直到成功为止。
		其实现过程就是CAS
		
		1. 对于数据更新频繁的场合，悲观锁效率更高
		2. 对于数据更新不频繁的场合，乐观锁效率更高
		
	执行器Executor
		并发编程中常用到的类，如：Executors
		
		Executor:
			执行器接口,用于管理线程Thread对象
			执行单一的Runnable对象，无返回值
		ExecutorService:
			执行若干Runnable对象，无返回值
			执行若干Callable对象，有返回值，立即返回Future对象，用于跟踪若干个异步线程任务的处理，保存了Callable的返回结果，进行异步通信
		ScheduleExecutorService：
			定时执行任务
			与ExecutorService类似，ScheduleExecutorService会按照设定好的周期调度我们的任务
		
		ExecutorService使用
			execute()
			或
			submit()：执行若干Callable或Runnable对象并返回保存着结果的Future对象
		
		Executor执行完后要关闭，否则里面的线程会一直占用资源
			shutdown()
				shutdown后的Executor将不再就受新的任务。强行submit会抛出RejectedExecutionException
			shutdownNow()
				shutdownNow后的Executor将不再就受新的任务,并且取消正在执行的task。通过调用Executors创建的线程的interrupt()方法。中断线程
				抛出CancellationException，强行submit会抛出RejectedExecutionException

		ThreadPoolExecutor：
			构造方法参数：
				corePoolSize：指定核心线程数
				maximumPoolSize：最大线程数
				keepAliveTime：允许线程空闲时间
				ThreadFactory：线程工程，用来创建每条线程
				RejectedExecutionHandler：拒绝执行线程时的处理办法
		
		Executors：	
			一个工厂类，用于创建Executor，ExecutorService，ScheduleExecutorService，ThreadFactory
			用于取得多种Executor的子类的实例，关联到callable和future
			
			Executors通过创建ThreadPoolExecutor来分别创建以下线程池
			如：
			随任务增加线程方式
				newCachedThreadPool()：ExecutorService的实例，无需指定初始化线程数，有新任务时自动创建线程处理
				任务多时，自动增加线程来做任务
				任务完成后，灵活回收空闲线程。
			单一线程方式
				newSingleThreadExecutor()：创建只有一条线程的ExecutorService的实例,提交多个任务时，任务进入等待队列，等待执行
				newSingleThreadScheduledExecutor()：创建只有一条线程的ScheduleExecutorService的实例
			线程池方式
				newFixedThreadPool(int n)：创建带有固定容量为n的线程池的ExecutorService的实例
				newScheduledThreadPool(int n)：创建带有容量为n的线程池的ScheduleExecutorService的实例
		
		有返回值的线程任务
			callable接口
				用于创建有返回值的任务，重写call()方法。必需用ExecutorService的submit()方法来执行Callable任务。
				ExecutorService.submit()会返回Future对象，该对象保存了Callable执行的返回结果
				ExecutorService.execute()无返回值，用于Runnable任务
			
			Future类
				功能：
					保存Callable返回的结果，取消线程任务，判断任务是否完成
					get()：取得Callable返回的结果
					cancle()：取消任务
					isDone()：判断Callable任务是否完成
		
		ThreadFactory接口
			线程工厂，定义线程的创建一个怎样的线程，定制Executor中创建的线程的属性
			向Executor传递一个ThreadFactory，定制Executor的线程属性，如守护线程，优先级，线程名称等属性
				
				
	原子类atomic
		包提供了一系列原子类,用于并发访问，实现原子性与可见性
		在操作这些原子类时不会阻塞线程，提高性能，因为没有用synchronize对其没有加同步锁访问，而是通过CAS乐观锁来保证变量的原子操作；
		
		atomic类的CAS
			修改atomic变量的值时，通过unsafe.compareAndSwapInt()来进行操作，保证操作原子性
			
	显式锁Locks
		Locks的fair/unfair
			公平模式：
				线程想取得锁，若锁不可用则进入ReentrantLock的等待队列（使用CAS来将等待线程构造成节点添加到队列后），
				即线程会保存到一个FIFO的Queue中（AQS的队列）
				,等待时间最长的线程首先获得锁，先进先出
			非公平模式：
				线程想取得锁，若锁不可用则等待，所有线程尽可能快地取得锁，
				有可能同一线程能连续获得锁，而等待了很久的线程迟迟不能取得锁
		Lock接口	//取代synchronize
			锁框架，提供一种比加synchronize监听器关联的锁更灵活的并发访问加锁操作
			方法：
				lock()	：线程取得锁，若锁不可用则被阻塞一直等待
				tryLock()：尝试取得锁，若成功取得则返回ture，否则返回false，不用等待获得锁
				tryLock(long timeout,TimeUnit unit)：尝试取得锁，在timeout内，若成功取得则返回ture，否则返回false。
				unlock():释放获得的锁，若线程没持有锁却释放，抛出IllegalMonitorStateException，在finally中unlock(),以防止死锁
			
			ReentrantLock重入锁
				Lock的一个实现，持有一个计数器，记录着该锁的被lock多少次，允许同一线程多次加锁lock()
				线程调用加锁方法（lock，tryLock，lockInterruptily）时，持有量+1，调用unlock()时，持有量-1，持有量减为0时，线程释放该锁
				其控制高并发的方式是CAS的实现，因此比synchronized有更高性能
						
				方法：
					isLocked():判断有any线程取得锁
					isHeldByCurrentThread()：判断当前线程是否取得锁
					lock.getHoldCount():返回持有量
			
		ReadWriteLock接口
			用于对数据频繁读取而较少修改的场合，此时能比Lock锁有更高的性能
			读写锁持有一对关联的锁Lock-----ReadLock和WriteLock
				ReadLock
					是一个Lock类
					非互斥锁，读锁只锁定读操作，同一读锁可被多条线程持有
				WriteLock
					是一个Lock类
					互斥锁，写锁只锁定写操作，同一时间只能被一条线程持有
			
				ReadWriteLock的writeLock被线程持有时，其他线程不能获得同一ReadWriteLock的任何锁
				ReadWriteLock的readLock被线程持有时，其他线程不能获得同一ReadWriteLock的writeLock锁，但可以获取readLock
			
			方法：
				readLock():取得读锁
				writetLock():取得写锁
				
			ReadWriteReentrantLock重入读写锁
				实现ReadWriteLock接口	，其中的ReadLock与WriteLock的实现是其实现了Lock接口的内部类
				持有两个计数器读锁计数器，写锁计数器，记录着该读写锁的被lock多少次，允许同一线程多次加锁lock()
				
				方法：
					getReadHoldCount():取得读锁持有量
					getWriteHoldCount():取得写锁持有量
								
		Condition	//取代Object的wait,notify()和notifyAll()，配合Lock使用
			通过LockInstance.newCondition()取得Condition原型，每次都创建一个新的Condition，因此Lock锁可绑定多个条件、与synchronize的区别
			使用
				用while（Condition），当满足某条件时使用await，使获得Lock的线程进入等待池
			方法
				await():使当前获得Lock的线程释放Lock，进入等待池一直等待
				signal():唤醒一个等待中的线程，
				signalAll():唤醒所有等待中的线程
			
			用于生产者/消费者模型

线程安全的实现方法！！！！
	1.互斥同步
		synchronized控制的代码
			通过字节码的monitorenter和monitorexit指令，锁定一个对象。同一线程可重入，计数加+。
		ReentrentLock控制的代码(功能更多，性能可能好点)
			同样可重入
			与synchronized相比的优势：
				等待可中断，可实现公平锁（按线程进入等待队列的事件顺序等待取得锁），锁可绑定多个条件（Condition）。
			JDK1.6后
	2.非阻塞同步
		通过硬件层面保证语义上要多次操作的行为只通过一条处理器指令就能一步完成。保证了行为的原子性。
		此类处理器指令有
			测试并设置，获取并增加，交换（swap），比较并交换（CAS），加载链接/条件存储（LL/SC）
		java中的CAS实现
			java中由sun.misc.Unsafe类提供硬件层面的CAS，不能直接使用Unsafe类，只能通过JUC包的atomic原子类来使用。
			！可能出现ABA问题
	3.不采用同步
		编写可重入代码，（不依赖公共资源，状态由参数传入，不调用不可重入方法）
			即无状态方法
			1.不依赖堆上的数据与公共的系统资源
			2.用到的状态量由参数传入
			3.不调用非可重入方法
		使用线程本地变量
			ThreadLocal<T>
			
锁优化
	自旋锁与自适应自旋锁
		互斥锁问题
			使用普通锁时，线程因需要等待获得锁而使cpu频繁挂起和恢复线程，带来了额外的开销。
			
		自旋锁	while（10--）	//JDK1.6后默认用自旋锁
			线程需要等待获得锁时，不会挂起而是进行忙循环（自旋）。
			自旋锁若忙循环了默认的10次后还没获得锁，则按传统的方式挂起线程。
			-XX:PreBlockSpin参数设置自选次数（默认10）	//阻塞前自旋n
		自适应自旋锁	
			若线程在自旋等待时刚刚获得过锁，则在下一次自旋等待时允许自旋更多次
			
	锁消除
		在JIT编译运行时消除不必要的锁
		通过逃逸分析技术，判断堆上的数据会不会逃逸出去被其他线程访问到，
		若数据不被其他线程访问到则认为该数据是线程私有的，数据同步就不必要进行，进而消除锁。
		
		ex：方法的局部变量StringBuffer，其实现中用到的锁在JIT时会被消除，因局部变量必定只能被当前线程访问到
	
	锁粗化
		若遇到对同一对象的连续加锁/解锁操作，则会使这连续多次的加锁/解锁操作合并为一次加锁/解锁操作
		
		ex：连续调用加了同步锁的方法，如连续使用StringBuffer的append()方法，不会没个append都加锁，而是将多次枷锁合为一次（lock指令）
	
	轻量级锁		//在竞争不太激烈的场景下使用，基础为CAS
		本意
			在没有多线程竞争的前提下，减小重量级锁使用互斥量产生的性能损耗。
			即无竞争时，用cas使线程取得轻量级锁，在多线程竞争锁时，才用膨胀为重量级锁
	
		通过CAS操作对对象的对象头做修改，使MarkWord指向线程的栈帧中的锁记录空间，避免使用互斥量的开销。	
		在存在锁竞争时，轻量级锁膨胀为重量级锁，并将MarkWord的标志位设置为10.	
		在竞争激烈的场景下不仅有重量级锁的开销，还有CAS的开销，此时轻量级锁比重量级锁更慢
	
	偏向锁
		线程获得过偏向锁后，以后若无其他线程获得过锁，则线程每次运行到被该所控制的同步块时都不再做同步操作(不加lock指令？)
	
	