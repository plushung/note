多态：一个变量、函数名，实际代表不一样的东西
（1）运行时多态	   运行时有不同表现   	
	一个引用变量实际会指向哪个类的实例对象，该引用变量发出的方法调用到底是哪个类中实现的方法，必须在程序运行期间才能决定。
	方法重写 (override)
（2）编译时多态    编译时得出不同函数
	编辑时多态是静态的，主要是指 [方法的重载]，它是根据参数列表的不同来区分不同的函数，通过编辑之后会变成两个不同的函数		(overload)

实现多态有三个必要条件：继承、重写（override）、向上转型（父类引用指向子类对象）。

两种形式可以实现多态。继承抽象类 和接口,重写(重写(Override)与重载(Overload))。

编写代码时的形参是静态类型
实际运行时根据传给形参的实例对象确定形参的实际类型，此时的形参的动态类型就是实例对象的类型。---变量多态。

静态绑定：根据变量的声明类型（形参类型）决定调用的函数
编译过程中就已经知道这个方法是哪个类的方法，此时由编译器获取其他连接程序实现

动态绑定：根据变量的动态类型（运行时形参变量实际管理的类型）决定所要调用的函数