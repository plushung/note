接口的
所有成员函数都是抽象的。即只有函数声明无具体实现
所有成员变量是常量

服务提供方给出一个接口规范，让那些想使用服务的一方去实现服务提供方给出的接口。使得使用服务的一方按照提供服务的一方的规范去做。

控制反转:
解决思路就是采取控制反转——具体实现我不管，我交给外部去实现，具体用的时候你把实体给我就好。
于是，我们做来个两件事情：
1.向外公布一个实现接口。——大家来实现哦，我用就好了，你办事儿我放心！
2.设置一组设置注入的方法。——具体用的时候你交给我就好了，我给你一套规范你交给我所有我需要的！

原来我们的程序我们控制的是具体的实现，写程序直接使用具体的实现。
现在我们编写程序时控制的只是它的接口，编码时没有具体实现，使用的是接口的抽象，只有在运行时才能确定该接口的具体实现。
原来我们依赖的是它的具体实现。现在我们依赖的是它的抽象接口，依赖的具体是什么在运行时才确定。
程序运行时，将接口具体的实现反转注入到抽象的参数中上。

java按钮button组件最常用这种匿名内部类的实现了。实际上这就是一种控制反转的思想，因为本身按钮该做什么应该是按钮自身的内部函数吧~而实际上你在实现的时候，传入的是一个new好的Listener对象参数，而做事的，是Listener中被Override的方法。

注入反转：
一个类公布一个接口和使用该接口的函数a
我们自己去实现该接口，让该类的函数a调用
函数a运行时就会反过来使用我们自己实现了那个接口的对象的某个函数。