QUIT_STAET
	服务的生产者：
		1.定义一个服务接口
			只为消费者提供服务接口，隐藏服务的具体实现
		2.实现服务接口
		3.用Spring配置Dubbo提供服务
			<?xml version="1.0" encoding="UTF-8"?>
			<beans xmlns="http://www.springframework.org/schema/beans"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
				xsi:schemaLocation="http://www.springframework.org/schema/beans        
									http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        
									http://dubbo.apache.org/schema/dubbo        
									http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
			
				<!-- 提供方应用信息，用于计算依赖关系 -->
				<dubbo:application name="hello-world-app"  />
			 
				<!-- 使用multicast广播注册中心暴露服务地址 -->
				<dubbo:registry address="multicast://224.5.6.7:1234" />
			 
				<!-- 用dubbo协议在20880端口暴露服务 -->
				<dubbo:protocol name="dubbo" port="20880" />
			 
				<!-- 声明需要暴露的服务接口 -->
				<dubbo:service interface="com.alibaba.dubbo.demo.DemoService" ref="demoService" />
			 
				<!-- 和本地bean一样实现服务 -->
				<bean id="demoService" class="com.alibaba.dubbo.demo.provider.DemoServiceImpl" />
			</beans>
		4.用spring启动应用
	服务的消费者：
		1.用spring配置应用远程服务
			配置文件：consumer.xml
			<?xml version="1.0" encoding="UTF-8"?>
			<beans xmlns="http://www.springframework.org/schema/beans"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
				xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
			 
				<!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
				<dubbo:application name="consumer-of-helloworld-app"  />
			 
				<!-- 使用multicast广播注册中心暴露发现服务地址 -->
				<dubbo:registry address="multicast://224.5.6.7:1234" />
			 
				<!-- !生成远程服务代理，可以和本地bean一样使用demoService -->
				<dubbo:reference id="demoService" interface="com.alibaba.dubbo.demo.DemoService" />
			</beans>
		2.在java代码获取并使用远程服务代理
			 DemoService demoService = (DemoService)context.getBean("demoService"); // 获取远程服务代理
		3.象使用本地的Java类一样使用远程服务代理
			demoService.action();
	
	
Provider
	提供者应用名：application name
	提供者提供的服务接口及实现引用：service interface ref
	注册中心地址：register address
	使用的协议及暴露的端口：protocol name port
	
	在 Provider 上尽量多配置 Consumer 端属性
		timeout  方法调用超时
		retries  重试次数
		loadbalance	负载均衡，同一个服务多次向注册中心注册，有多个服务地址向consumer提供服务，consumer从这多个地址中选取一个获取服务
		actives		??
	
consumer	
	消费者应用名：application name
	消费者使用的服务接口及通过id来引用该服务的Bean：reference interface id
	注册中心地址：register address	//地址的端口为服务提供协议端口
	
Invoker
	Invoker 是实体域，它是 Dubbo 的核心模型，Invoker代表一个可执行的实体，如：一个服务，一个注册中心等实体
	
	
服务治理
	cluster
		从容错的维度，保证能为消费者提供可用的服务
		
		
	目录服务Directory  Static/Registry---->List<Invoker>
		用来记录可用的Invoker列表，Directory.list来列出所有的Invoker种类，这里的每个Invoker表示一种服务
		
		StaticDirectory 	静态目录
			Invoker列表通过构造器传入Directory中
			
			多个注册中心集群用StaticDirectory记录注册中心的Invoker列表，静态地添加注册中心列表
			需要多少个注册中心，就向register标签中加多少个注册中心的url，每个register标签会构造一个注册中心Invoker
			
		RegistryDirectory	注册目录
			Invoker列表通过注册中心来获取得到存放到Directory中，通过注册中心动态地添加服务调用列表
		
			服务的集群用RegistryDirectory来记录服务的Invoker列表，服务从注册中心获取，因此用RegistryDirectory来得到服务调用列表
			
			引用服务时，对应该服务的Directory类实例会负责向注册中心（zookeeper）订阅该服务，第一次订阅会拿到所有服务提供方的信息
			
	路由与配置  Router.route----> Invokers>Invoker的实现
		用Directory.doList获取到服务列表后（Invoker列表），然后根据Router列表对Invoker进行路由选择
		Router对Invoker列表中的每种服务进行路由，得到该种服务的实现的集合（Invokers），Invokers里的元素都实现了同一种Invoker
		
	负载均衡
		从性能的维度，使得提供给消费者的服务性能最好，消费者平均地消费服务实例
		
		经过Router获取到某种服务的Invokers后，负载均衡根据选择的负载均衡策略，从服务实现群（Invokers）中选择一个具体的服务调用。
		保证Invokers的每个服务的工作量合理平均