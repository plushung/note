QUIT_STAET
	服务的生产者：
		1.定义一个服务接口
			只为消费者提供服务接口，隐藏服务的具体实现
		2.实现服务接口
		3.用Spring配置Dubbo提供服务
			<?xml version="1.0" encoding="UTF-8"?>
			<beans xmlns="http://www.springframework.org/schema/beans"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
				xsi:schemaLocation="http://www.springframework.org/schema/beans        
									http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        
									http://dubbo.apache.org/schema/dubbo        
									http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
			
				<!-- 提供方应用信息，用于计算依赖关系 -->
				<dubbo:application name="hello-world-app"  />
			 
				<!-- 使用multicast广播注册中心暴露服务地址 -->
				<dubbo:registry address="multicast://224.5.6.7:1234" />
			 
				<!-- 用dubbo协议在20880端口暴露服务 -->
				<dubbo:protocol name="dubbo" port="20880" />
			 
				<!-- 声明需要暴露的服务接口 -->
				<dubbo:service interface="com.alibaba.dubbo.demo.DemoService" ref="demoService" />
			 
				<!-- 和本地bean一样实现服务 -->
				<bean id="demoService" class="com.alibaba.dubbo.demo.provider.DemoServiceImpl" />
			</beans>
		4.用spring启动应用
	服务的消费者：
		1.用spring配置应用远程服务
			配置文件：consumer.xml
			<?xml version="1.0" encoding="UTF-8"?>
			<beans xmlns="http://www.springframework.org/schema/beans"
				xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
				xmlns:dubbo="http://dubbo.apache.org/schema/dubbo"
				xsi:schemaLocation="http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd        http://dubbo.apache.org/schema/dubbo        http://dubbo.apache.org/schema/dubbo/dubbo.xsd">
			 
				<!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
				<dubbo:application name="consumer-of-helloworld-app"  />
			 
				<!-- 使用multicast广播注册中心暴露发现服务地址 -->
				<dubbo:registry address="multicast://224.5.6.7:1234" />
			 
				<!-- !生成远程服务代理，可以和本地bean一样使用demoService -->
				<dubbo:reference id="demoService" interface="com.alibaba.dubbo.demo.DemoService" />
			</beans>
		2.在java代码获取并使用远程服务代理
			 DemoService demoService = (DemoService)context.getBean("demoService"); // 获取远程服务代理
		3.象使用本地的Java类一样使用远程服务代理
			demoService.action();
	