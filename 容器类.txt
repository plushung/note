
Collection：保存单个元素
	是一个序列，里面的元素独立
	存储方式：线性列表 长度可变

	Iterator迭代器：
		提供一种方式去遍历容器，而不必理会容器是哪种实现，
		用next遍历元素时，只能单向移动，通过remove移除最后一次next得到的元素
	
	listIterator
		用于迭代List的迭代器，可以前后移动遍历元素
		hasNext():有无下一个元素
		next()：下一个元素
		hasPrevious():有无上一个元素
		previous():上一个元素
		set()：迭代元素赋值
	
	List：
		按元素插入顺序保存元素
		检索效率高效，删除和插入效率低下，插入和删除会引起元素位置改变
		
		基本方法:
			add(),get(),remove(),contains()
			subList(start,end)：序列切片，将源List的start到end间的元素组成行的List
			set(index,element)：将index中的元素替换
			retainAll(Collection):与交集
		
		ArrayList：
			底层用数组Object[]实现保存数据，用于随机访问元素，访问速度快，插删数据较慢
			随ArrayList的尺寸增大，删插数据的代价会越来越大
			默认大小：10
			负载因子：1
			阈值：10*1=10
			扩容方式：原始大小<1
		LinkedList：
			用双向链表保存数据，访问熟读稍慢，插删速度快
			对比LIst，添加了用于棧，队列，双端队列的方法
			
			除了List的基本方法外，特有方法
				getFirst(),element()，peek()：取得链表中的表头元素，不移除,peek在无元素时返回null
				removeFirst(),remove()，poll():移除并返回表头元素,poll在无元素时返回null
				removeLast():像队列一样，移除时间长的元素，移除队尾元素
				
		Stack
			LinkedList可以用于栈操作，是LIFO，栈顶元素是链表的表头
			push():向栈顶压入元素，将元素出入list的前面
			pop():弹出栈顶元素
			peek():查看栈顶（表头）元素，不删除，不存在则返回null
			
	Set：
		不含重复元素
		检索效率低下，删除和插入效率高，插入和删除不会引起元素位置改变
		set接口与Collection一样，有相同的方法，只是set的内部元素存储的实现方式不同，不含重复元素
		
		HashSet：
			通过Hash函数来存储元素，访问速度快，但不保证元素顺序，存入的元素要实现HashCode()方法，才能用Hash存储
			内部维护一个HashMap，元素被存放在HashMap的key上，用于快速查找元素
			默认大小：16
			负载因子：0.75f
			阈值：16*0.75=12
			扩容方式：原始大小<1 （x2）
		TreeSet：
			实现了SortSet接口，通过红黑Tree数据结构保存并排序元素，按升序（自然排序）来存放元素，
			存入的元素要实现Comparable接口，才能进行比较排序，过ComparaTo方法比较
			
		LinkedHashSet：
			通过双向链表维护元素插入顺序，通过hash存储数据，保持元素的插入顺序，存入的元素要实现HashCode()方法
			内部维护着一个HashSet
	
		HashSet优点：添加查询元素快
		TreeSet优点:排序的元素
		LinkedHashSet优点：保持元素存放顺序，速度比TreeSet快，但比HashSet慢
		要求速度:HashSet>LinkedHashSet>TreeSet
		要求顺序:TreeSet>LinkedHashSet>HashSet
		
	Queue：
		按排队规则取得元素，通常是FIFO，元素从一端插入另一端取出，通过Comparable接口比较排列元素，决定输出顺序
		
		单向队列，一边入一边出 
		
		基本方法：
			offer()：向队尾提供一个元素
			peek()：返回队头(链表头)元素，无则返回null
			poll()：返回并移除队头(链表头)元素，无则返回null
			
		LinkedList先进先出队列
			LinkedList实现的Queue的子类Deque接口，所以LinkedList已经是一种queue，Deque
			是一种FIFO队列，以元素在队列中等待时间最长的元素先出
			
		PriorityQueue优先队列(给予优先堆实现，是一个二叉堆)  根据comparable接口的方法排序
			非FIFO队列，优先级高的元素先出列，有次序的，也是通过实现了Comparable接口的元素来实现排序，像treeSet
			offer()时，元素经过排序存放在堆数据结构中，默认是按元素的自然顺序排序，可为其提供Comparator来按照自己定义的顺序排序，优先顺序
			peek()，查看队尾元素
			,poll(),remove(),将取出堆根元素，即优先级最高的元素
			
		线程安全版本Queue 	！！通过加ReentrantLock控制并发访问
			LinkedBlockingQueue
				在FIFO队列上加上并发访问时阻塞的功能,
				默认容量动态增加无限制，存在时间最长的元素先出列（链表的头结点）FIFO ，若
				访问时加ReentrantLock，无元素则用Condition的await阻塞线程
			PriorityBlockingQueue
				在优先队列上加上并发访问时阻塞的功能
			ConcurrentLinkedQueue
				
			ArrayBlockingQueue
				容量给定，公平模式下使用队列的线程顺序遵循FIFO、非公平模式下使用队列的线程顺序不指定，若无元素则用Condition的await阻塞线程
			
			
Map：保存一对元素，key唯一，元素的hashcode作key
	是一组“键值对“对象，里面每个对象有Key和对应的value，通过键的equals()比较键，确保无重复键
	存储方式：key/value对 长度可变,
	map中使用Entity保存键值对实体，Node类是Entity的一个实现，即实际用Node保存一对元素
	
	基本方法:
			put()
			get()

 	HashMap 类：
		使用散列函数存储数据，具有很快的访问速度，同时也就不能保证顺序
		通过hashCode()取得键,有极高的检索速度。因此键元素要实现hashCode()方法，同时要用equals()来判定元素是否为同一个
		每对元素保存到Node数组---table中，在下标为(hash&Maxindex)的位置放入元素
		默认大小：16
		负载因子：0.75f
		阈值：16*0.75=12
		扩容方式：原始大小<1
		当存储的元素达3/4时自动扩容并对元素再散列
	
	TreeMap：
		实现了SortedMap接口，通过红黑Tree数据结构保存元素，按键升序来存放元素，键元素要实现Comparable接口来确定顺序排序
		
	LinkedHashMap：
		通过双向链表存储数据，内部维护着HashMap保存元素，保持元素的插入顺序
		
	HashMap优点：添加查询元素快
	TreeMap优点:排序的元素
	LinkedHashMap优点：保持元素存放顺序，速度比TreeSet快，但比HashSet慢
	要求速度:HashMap>LinkedHashMap>TreeMap
	要求有序:TreeMap>LinkedHashMap>HashMap

Hash存储方式		hashSet，hashMap，LinkedHashSet，LinkedHashMap
	通过Hash（散列）来存储数据可加快数据的检索速度（拿hashcode为数组下标，随机读取元素）
	使用Hash时，元素要实现hashCode()方法，生成自定义的Hash码，Object的hashCode()默认是用对象的地址来计算hashCode的
	
	通过hashCode计算得到的散列码有可能冲突，使得一个hashCode对应多个键(要在数组下标为hashCode的位置中存储这多个键的集合)，
	解决哈希冲突，同时要实现equals()方法,从共享hashcode的集合中取得相应键的实体，保证元素的唯一性
	
Tree存储方式		接口:SortedSet,SortedMap. 唯一实现:TreeSet，TreeMap
	通过红黑二叉树存储元素，涉及到元素的比较排序，因此元素要实现Comparable接口或继承comparator类

并发
	普通容器并发修改
		保护机制：
			快速报错：当使用Iterator遍历容器时，有其他线程对同一容器做出修改，则会报错，是java的保护机制----fail-fast
				抛出ConcurrentModificationException，并发修改异常
				
		解决方法
			使用并发容器(免锁容器)			//synchronized 同步容器已经不再使用，Vector、HashTable	。这里的是非synchronized容器
			
				1.ReentrantLock控制写操作的容器	//使容器安全失效
					CopyOnWriteArrayList
						读取时不加锁
						写入时加ReentrantLock，并复制源数组，对副本进行修改，然后用副本取代源数组，最后解锁
					CopyOnWriteArraySet
						使用CopyOnWriteArrayList并去掉重复元素
				
					CopyOnWrite在迭代时，能够有效防止出现ConcurrentModificationException（快速失败），
					安全失败（fail-safe）基于对数组的复制，修改原数组不会导致副本抛出异常，能够安全地失效
					
				2.synchronized装饰的容器
					Collections.Synchronized*(Collection s)
						使用装饰器设计模式,包装普通容器类，
						简单地用synchronized关键字装饰容器的每个方法，使非线程安全的容器类能够被安全地访问。
						
				3.另一种并发控制的容器
					ConcurrentHashMap、ConcurrentLinkedQueue
					JDK8之前，使用分段锁对容器进行部分加锁，该分段锁继承了ReentrantLock
					JDK8之后，应用CAS对容器进行并发控制。即更新前与旧值比较，若不同则放弃更新
遍历：
1.foreach
2.for循环
3.iteraor

map遍历
1.遍历keySet取值
2.通过entrySet取得Map.Entry内部类对象集合，并遍历，getKey，getValue

