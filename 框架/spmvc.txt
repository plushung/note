Spring MVC
	流程：
					DispatcherServlet
		HTTP request-------------------->|
							|			back
							|<------->HandlerMapping		选择适当的Controller 
							|<------->Controller			返回model and viewname
							|<------->ViewResolver		根据viewname解释取得实际视图名
		HTTP request<--------------------|<------->View			用model渲染并返回视图
	
	HandlerMapping、Controller 和 ViewResolver 是 
	WebApplicationContext 的一部分，而 WebApplicationContext 是带有一些对 web 应用程序必要的额外特性的 ApplicationContext 的扩展。

	一个web应用程序可以有多个DispatcherServlet，处理不同路径的映射
	需求的配置(web.xml)
		在web.xml里定义DispatcherServlet类的bean，加载[servletname]-servlet.xml配置文件 (webapplicationcontext)
		或
		<context-param>
   			<param-name>contextConfigLocation</param-name>
   			<param-value>/WEB-INF/HelloWeb-servlet.xml</param-value> (RootWebApplicatonContext)
		定义上下文配置文件位置
		可以通过在 web.xml 文件中添加 servlet 监听器 ContextLoaderListener 自定义配置文件的名称和位置
		在web.xml里定义ContextLoaderListener 监听器
		静态资源映射
		<servlet-mapping>
			<servlet-name>default</servlet-name>
			<url-pattern>*.html</url-pattern>
		</servlet-mapping>
	
	
	servlet.xml配置文件//或者使用基于代码的配置，继承WebApplicationInitializer
		启用组件扫描，扫描controller <context:component-scan base-package="..">
		启用javaconfig  <context:annotation-config />
		配置视图解析器	<Bean class="**viewResolver">
		声明bean		<baen class="..">

Spring MVC Content

	WebApplicationInitializer是Spring MVC提供的一个接口
		作用:查找基于代码的配置，并应用来初始化servlet3以上的web容器
		
		抽象实现:AbstractDispatcherServletInitializer
			用于简化servlet配置，只要指定mapping映射
	
	ApplicationContext：
		（其实就是根据[servletname]-servlet.xml配置文件生成的上下文对象）
		WebApplicationContext继承自ApplicationContext
			WebApplicationContext知道它关联到的是哪个servlet（它持有一个该ServletContext的引用)
	
		每个DispatcherServlet有一个自己的上下文对象WebApplicationContext，继承了一个唯一的RootWebApplicationContext
			
			RootWebApplicationContext---->DispatcherServlet1's  WebApplicationContext
							|---->DispatcherServlet2's  WebApplicationContext
							|---->DispatcherServlet3's  WebApplicationContext
							...
			<context-param>
				<param-name>contextConfigLocation</param-name>
				<param-value>/WEB-INF/springDispatcherServlet-servlet.xml</param-value>
			</context-param>
			//在context-param下指定的配置文件是RootWebApplicationContext
			
			<init-param>
            			<param-name>contextConfigLocation</param-name>
           			<param-value>servletname-servlet.xml</param-value>
        		</init-param>
			//在<servlet><init-param>下指定的配置文件是WebApplicationContext

			//可以只配置RootWebApplicationContext	
	
	DispatcherServlet：

		他维护了一个列表，其中保存了其所依赖的所有bean的默认实现(下面这些特殊bean的默认shixian)

		使用了特殊的bean来处理请求、渲染视图等，这些特定的bean是Spring MVC框架的一部分，包括:
			HandlerMapping		确定要用哪个Controller
			HandlerAdapter		用于调用请求mapping到的Controller
			HandlerExceptionResolver处理器异常解析器
			ViewResolver		解析视图
			LocaleResolver & LocaleContextResolver	解析客户端所在的地区信息，国际化的视图定制
			ThemeResolver		解析你web应用中可用的主题
			MultipartResolver	解析multi-part的传输请求，比如支持通过HTML表单进行的文件上传等
			FlashMapManager		存储并取回两次请求之间的FlashMap对象

			可在WebApplicationContext(xml)中配置以上特殊Bean
			或 用AbstractDispatcherServletInitializer，简化配置

		处理请求:
			1.先把WebApplicationContext对象作为Attribute绑定到请求上，以便Controller或其他组件利用
			2.地区（locale）解析器绑定到请求上
			3.主题（theme）解析器绑定到请求上
			4.如果你配置了multipart文件处理器。如果文件是multipart的，则将该请求包装成一个MultipartHttpServletRequest对象
			5.为该请求查找一个合适的处理器，找到处理器则执行处理器链
			如果处理器返回的是一个模型（model），那么框架将渲染相应的视图

	Controller:
		用@controller声明一个类作为Controller 由handlerMapping查找
		或 不用Controller，直接把该控制器类声明成Bean(@bean/<bean>)
		
		用@Controller 一定要开启 ComponentScan(xml/javaconfig),它继承了@Component

		@RequestMapping（"path"）注解来将请求URL映射到整个controller类或某些方法上
			method=GET 指定处理的请求类型
		
		映射请求路径:
			URI模板:http://project/{paramName}
				映射http://project/{paramName}请求，
				在控制器方法的入参用 @PathVariable（“paramName”） 取得paramName位置的值
			
			带正则表达式的URI模板？！
				/{varName:regex}/* regex为正则表达式
	
			注解支持在路径中使用占位符，以取得一些本地配置、系统配置、环境变量
				/${xxxx}/*
			
			可消费（contentType）的媒体类型（根据请求类型处理请求）
				consumes="application/json" 参数指定处理
				ContentType为“ApplicationContext/json”的请求,
				请求体的值放到@RequestBody的参数中

			可生产（Accept）的媒体类型（根据响应类型处理请求）
				produces="application/json"参数指定处理
				Accept为“ApplicationContext/json”的请求
				服务器返回的是ApplicationContext/json

					推荐用MediaType定义好的一些常量为consumes/produces赋值

		定义@requestMapping的处理方法:
			使用@RequestParam将请求参数绑定至方法参数
				@RequestParam(path="id", required=false)）指定要绑定的参数，非必需
			
			使用@RequestBody注解映射请求体
				读取Request请求的body部分数据,绑定到方法参数中
				@RequestBody注解暗示了方法参数应该被绑定了HTTP请求体的值。
				可以处理的ContentType为（GET，POST）
							   application/x-www-form-urlencoded 表单数据（以PUT方式提交时必需用@RequestBody）
							   application/json, application/xml等must
				HttpMessageConverter负责将HTTP请求信息转换成对象 (ex:将json内容转换为对象，要用jackson2.jar库)
			
			使用@ResponseBody注解映射响应体
				@ResponseBody根据Request对象header部分的Accept属性，逐一按accept中的类型，去遍历找到能处理的HttpMessageConverter
				@ResponseBody注解与@RequestBody注解类似。@ResponseBody注解可被应用于方法上，
				标志该方法的返回值应该被直接写回到HTTP响应体中去,Spring使用了一个HttpMessageConverter来将返回对象转换到响应体
				(ex:将返回对象内容转换为json，要用jackson2.jar库的MappingJackson2HttpMessageConverter)
			
		使用@RestController注解创建REST控制器
			@RestController=@Controller+@ResponseBody

		使用HTTP实体ResponseEntity，HttpEntity~=ResponseBody,RequestBody+存取请求头和响应头
			使用了HttpMessageConverter
			Spring使用了HttpMessageConverter来对请求流和响应流进行转换。
			HttpEntity与@RequestBody和@ResponseBody很相似。除了能获得请求体和响应体中的内容之外，
			HttpEntity（以及专门负责处理响应的ResponseEntity子类）还可以存取请求头和响应头
			=@responseBody+设置响应头

		@ModelAttribute
			用在方法参数上:
				把Model中的对象数据绑定到参数上 
			用在方法返回值:
				使@RequestMapping 方法返回值作为模型数据，自动将该返回值加入到ModelMap中，供视图访问
				
				使用@ModelAttribute注解的方法会在每一个@RequestMapping标注的方法前执行，
				controller里的方法实行时会用请求中的参数绑定到方法参数中

				用法技巧:
				暴露表单引用对象为模型数据：放在处理器的一般方法（非功能处理方法）上时，是为表单准备要展示的表单引用对象
			与@SessionAttributes("currentUser"）配合
			往 Session 中存储或者从 Session 中取出指定属性名的具体对象
			
			0.！使用@ModelAttribute注解的方法会在每一个@RequestMapping标注的方法前执行，			
			1.Model类，（不通过@ModelAttribute添加）默认在控制器返回的视图名对应的视图上有效，
			・同一控制器类不同方法间Model不共享，Model离开控制器处理方法后就只能在视图中显示数据
			2.通过在方法上@ModelAttribute，将返回值作模型数据添加到模型上，
			・当输出视图时，@ModelAttribute的model复制到Model

			3.离开控制器后，model要不渲染到视图显示，要不消失

		@SessionAttributes（“name”）
			用于控制器类级上
			参数指定存贮在session上的模型数据的名称
			把指定模型数据名添加到一个session中
			
		基于Servlet3的异步请求处理
			控制器可以返回DeferredResult或Callable对象来异步地计算其返回值
			异步请求处理的相关配置:
				在web.xml的servlet元素下添加子标签
					<async-supported>true</async-supported>设置为true
					Filter都必须配置为支持ASYNC类型的请求分派
				0或用AbstractAnnotationConfigDispatcherServletInitializer来简化配置
			1.控制器方法可以返回一个Callable对象，进行异步处理
			2.另一个选择，是让控制器方法返回一个DeferredResult的实例
			区别:callcable由只能由taskExecutor处理
			   DeferredResult可由任何线程处理
			
			Callable的异步请求流程:(由TaskExecutor线程处理)
				1.控制器方法返会Callable对象
			!	2.进行异步处理，并把该Callable对象提交给另一个独立线程的执行器TaskExecutor处理
				3. DispatcherServlet和所有过滤器都退出Servlet容器线程，但响应对象未返回给客户
				4. Callable对象处理完毕返回结果，此时Spring MVC会重新把请求分派回Servlet容器，恢复处理
				5. DispatcherServlet再次被调用，恢复对Callable异步处理所返回结果的处理
			
			DeferredResult异步请求流程:(可由任何线程处理)
				1.控制器先返回一个DeferredResult对象，并把它存取在内存（队列或列表等）中以便存取
			!	2. Spring MVC开始进行异步处理
				3. DispatcherServlet和所有过滤器都退出Servlet容器线程，但此时方法的响应对象仍未返回
				4.由处理该请求的线程对 DeferredResult进行设值，然后Spring MVC会重新把请求分派回Servlet容器，恢复处理
				5. DispatcherServlet再次被调用，恢复对该异步返回结果的处理
				
	Spring MVC 处理器映射(HandlerMapping)
		 <mvc:annotation-driven/>//作用是处理器映射
		 //作用于@Controller,它会自动注册DefaultAnnotationHandlerMapping与AnnotationMethodHandlerAdapter
		 //默认配置了RequestMappingHandlerAdapter,为他配置了一个默认的HttpMessageConverter
		 RequestMappingHandlerMapping
			before：上个版本要定义一个或多个HandlerMapping <bean>以将进入容器的web请求映射到合适的处理器方法
			now：定义RequestMappingHandlerMapping类的bean 自动查找@RequestMapping的@Controller控制器bean
			
			定义一个处理器映射的方法 并 配置拦截器
			<bean id="handlerMapping" class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping">
				<property name="interceptors">
					<bean class="example.MyInterceptor"/>
				</property>
			</bean>
			
		Spring MVC 使用HandlerInterceptor拦截请求
		 HandlerInterceptor接口
		 或
		 继承HandlerInterceptorAdapter简化拦截器的配置
				控制器方法处理的请求都会被配置的拦截器先拦截到
				实现HandlerInterceptor接口的类做拦截器拦截处理请求，对HttpServletRequest, HttpServletResponse处理拦截
					包含3个方法:
						preHandle()  	在处理器前执行
						postHandle() 	在处理器后执行
						afterCompletion()	在整个请求完成后执行
				在处理器映射里配置interceptors属性，使用拦截器s可以定义多个拦截器
					上面的配置
				<bean class="handlerMapping">
					<property name="interceptors"
						<list>
							<bean class="example.MyInterceptor"/>
							<ref name="localinterceptor"/>
				
				使用@ResponseBody或ResponseEntity的方法时
				HttpMessageConverter会在拦截器的postHandle方法被调之前就把信息写回响应中。这样拦截器就无法再改变响应了
				若要postHandler起作用，
				请让你的应用实现ResponseBodyAdvice接口，并将其定义为一个@ControllerAdvice bean或直接在RequestMappingHandlerMapping中配置。
	
	Spring MVC 视图解析(ViewResolver)
		解析视图名，给分发器渲染
		基础:使用ViewResolver接口解析视图
		Spring有非常多内置的视图解析器:
			其中：UrlBasedViewResolver
					ViewResolver接口的一个简单实现。它直接使用URL来解析到逻辑视图名
				InternalResourceViewResolver	
					UrlBasedViewResolver的一个好用的子类。它支持内部资源视图（具体来说，Servlet和JSP）、
					以及诸如JstlView和TilesView等类的子类
				ResourceBundleViewResolver	
					视图解析器接口ViewResolver的一个实现，采用bundle根路径所指定的ResourceBundle中的bean定义作为配置。
					一般bundle都定义在classpath路径下的一个配置文件中。默认的配置文件名为views.properties。
				xmlViewResolver
					 <property name="location">
						<value>/WEB-INF/spring-views.xml</value>
					</property>指定xmlViewResolver去/WEB-INF/spring-views.xml找到要返回给DsipatcherServlet的视图bean
				如果需要在应用中使用多种不同的视图技术，可以使用ResourceBundleViewResolver
		
		另外：org.springframework.http.converter.json.MappingJacksonHttpMessageConverter
			用于解析json视图的视图解析器
			
		
		Spring MVC 视图链
			Spring支持同时使用多个视图解析器，在他们的bean设置order属性指定它们的次序
				 <property name="order" value="1"/>
			for viewResolver i in viewResolverS:
				if i.view!=null:
					return i.view
				else:
					continue
			throw ServletException
			如果所有解析器都不能返回视图就抛出异常
			如果不把InternalResourceViewResolver放置在解析器链的最后，将可能导致解析器链无法完全执行
			 InternalResourceViewResolver永远都会返回一个视图。（可能是null）
		
		Spring MVC 视图重定向
			重定向视图 RedirectView
				控制器返回一个重定向视图RedirectView，使DispatcherServlet放弃使用一般的视图解析机制，
				Spring重定向视图RedirectView调用HttpServletResponse.sendRedirect()实现重定向
			向重定向目标传递数据
				@RequestMapping里声明RedirectAttributes类型的方法参数，指定被传递到重定向的视图的参数
				模型Model中的所有属性默认都会考虑作为URI模板变量被添加到重定向URL中
					@RequestMapping方法可以声明一个RedirectAttributes类型的方法参数
					(要在config类中启用@EnableWebMvc或
					在xml中用<mvc:annotation-driven> 要引入xmlns和xsi)
					如果重定向成功发生，那么RedirectAttributes对象中的内容就会被使用到URI模版上；
					否则URI模版使用模型model中的数据
					
			重定向前缀――redirect:重定向
				以Servlet上下文作为相对路径进行查找重定向路径
				
			重定向前缀――forward:转发
				以Servlet上下文作为相对路径进行查找重定向路径
				但当你主要使用的是其他的视图技术，而又想要强制把一个资源转发给Servlet/JSP引擎进行处理时，这个前缀就很有用
				
		Spring MVC 内容协商解析器
			ContentNegotiatingViewResolver，不解析视图，而是把解析工作交给其他视图解析器
			
	Spring MVC 提供地区信息(LocaleResolver)
		DispatcherServlet通过LocaleResolver对象为你提供了自动使用用户的地区信息来解析消息的能力。
		
		地区解析器LocaleResolver
			LocaleResolver对象来完成的解读地区信息。
			一个请求进入处理时，DispatcherServlet会查找一个地区解析器。如果找到，就尝试使用它来设置地区相关的信息
		Accept请求头解析器
			AcceptHeaderLocaleResolver解析器会检查客户端（比如，浏览器，等）所发送的请求中是否携带accept-language请求头。	
		Cookie解析器
			CookieLocaleResolver解析会检查客户端是否有Cookie，里面可能存放了地区Locale或时区TimeZone信息
		Session解析器
			SessionLocaleResolver允许你从session中取得可能与用户请求相关联的地区Locale和时区TimeZone信息。
		地区更改拦截器
			LocaleChangeInterceptor
			
	Spring MVC 主题概览
		Spring Web MVC框架提供的主题来为整站的应用设置皮肤/主题，这可以提高用户体验。
		主题 是指一系列静态资源的集合，并且主要是样式表和图片，它们决定了你的应用的视觉风格。
		
	Spring MVC 文件上传(MultipartResolver)
		MultipartFile file
		1使用MultipartResolver与Commons FileUpload传输文件
			通用Multipart解析器CommonsMultipartResolver（MultipartRevolver的一个实现）
			使用Jakarta Commons FileUpload解析multipart请求；
				类路径下要有Jakarta Commons FileUpload
				<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
					<!-- 支持的其中一个属性，支持的最大文件大小，以字节为单位 -->
					<property name="maxUploadSize" value="100000"/>
				</bean>
				流程:
					DespatcherServlet检测请求若为Multipart则把该请求交给MultipartRevolver解析
						CommonsMultipartRevolver把请求包装为MultipartHttpServletRequest对象
		2处理Servlet 3.0下的MultipartResolver，StandardServletMultipartResolver
			要使用基于Servlet 3.0的多路传输转换功能，
			你必须在web.xml中为DispatcherServlet添加一个multipart-config元素
				<multipart-config>
					<!--上传到/tmp/upload 目录-->
				<location>/tmp/upload</location>
					<!--文件大小为2M-->
				<max-file-size>2097152</max-file-size>
					<!--整个请求不超过4M-->
				<max-request-size>4194304</max-request-size>
					<!--所有文件都要写入磁盘-->
				<file-size-threshold>0</file-size-threshold>
				</multipart-config>
					
					依赖于Servlet 3.0对multipart请求的支持（始于Spring 3.1）
	
		Spring MVC 处理客户端发起的文件上传请求
			场景:http消息体中既有form-data的消息，又有像json这样的meta-data数据，
			   消息体中有多部分数据
			若消息体中只有form-data则在控制器参数中添加@RequestParam（“name”）即可取得Multipart数据
			但是如果消息体中还有json对象数据@RequestParam String metadata只会把他解析为普通同字符串，不会用转换器把json转换
			
			@RequestPart("name") 用于控制器方法参数中
				请求的请求体转换成一个对象，转换时考虑多路请求中不同的内容类型参数
				若name的那部分数据是Multipart/form-data则把这部分当作MultipartFile处理
				若name的数据是meta-data（如json），则把他当作@RequestBody处理，
					若ContentType=“ApplicationContext/json”,就MappingJackson2HttpMessageConverter转换成对象
					
	Spring MVC 异常处理HandlerExceptionResolver,ResponseStatusExceptionResolver
		spring的处理器异常解析器HandlerExceptionResolver接口，负责处理控制器里发生的异常
		它只是提供了resolveException(Exception, Hanlder)方法的一个实现而已，方法会返回一个ModelAndView
		
		操作:
			使用SimpleMappingExceptionResolver //与Servlet API提供的异常映射特性是功能等价
			或 在控制器的异常处理方法上注解@ExceptionHandler //仅仅处理该处理器里的异常
				直接在控制类的某个方法上用@ExceptionHandler，使得这个方法处理该控制器发生的错误
			或 在@ControllerAdvice类中的方法@ExceptionHandler，//可以处理多个处理器的异常
				@ControllerAdvice定义一个专门处理控制器事件的控制器类，
				在该控制器方法上@ExceptionHandler方法处理特定的控制器错误
			若@ExceptionHandler方法只返回错误码不返回内容，则由Servlet容器渲染在web.xml下指定的错误页面
		默认处理器异常解析器DefaultHandlerExceptionResolver会将Spring MVC抛出的异常转换成对应的错误状态码。
			DefaultHandlerExceptionResolver在启用mvc（@EnableWebMvc/<mvc:annotation-dirven>）时默认已经被注册了
		
		Spring MVC 使用@ResponseStatus注解业务异常
			业务异常可以使用@ResponseStatus来注解，由ResponseStatusExceptionResolver解析
			DispatcherServlet默认注册一个ResponseStatusExceptionResolver
			
		Spring MVC 对Servlet默认容器错误页面的定制化
			web.xml在<servlet>标签下的<error-page><location>下定义错误页面
			当响应的状态码被设置为错误状态码，并且响应体中没有内容时，Servlet容器通常会渲染一个HTML错误页
				<error-page>
					<location>/error</location>
				</error-page>
				
	Spring MVC 对"约定优于配置"的支持
		在spring mvc中的命名按照 约定 的命名规则去命名，则可以大大减少配置，达到快速构建应用的目的
		约定优于配置 在M V C 三个层面上的都得到Spring MVC的支持
		
		C Spring MVC 控制器类名-处理器映射  
			！！！要声明ControllerClassNameHandlerMapping的bean
			并implements Controller
			
			ControllerClassNameHandlerMapping 处理器映射是HandlerMapping的子类
			作用是以类名来获取Controller，类名约定为**xxxController**，xxx是具体的控制器名
			类的命名符合驼峰命名法
			可省去@RequestMapping的配置
			ex:
				WelcomeController将映射到/welcome*请求URL
				HomeController 将映射到/home*请求URL
				IndexController 将映射到/index*请求URL
				
			普通的SimpleUrlHandlerMapping
				定义维护一个url-Controller映射表，把url映射到controller上，
			约定的ControllerClassNameHandlerMapping
				不须维护url-Controller映射表，减去繁琐的映射表维护工作
				直接根据url和Controller名字完成映射
				
		M Spring MVC 模型ModelMap
			ModelMap类其实就是一个豪华版的 Map，它是Map的一个实现
			向ModelMap添加model时，不用显式指定名称，将以对象类名的小写字母作为model的名字
			ModelAndView类里用ModelMap存储model的
			
			添加集合model	
				约定键名为统一在类名后加“List”
					x.y.User[]其生成的键名是userList
					java.util.ArrayList<User>,为其生成的键名是userList
					java.util.HashSet<User>,为其生成的键名是userList
					
		V Spring MVC 视图-请求与视图名的映射
			DefaultRequestToViewNameTranslator为我们根据约定生成视图名，要声明为Bean
			Spring Web MVC的DispatcherServlet会为你实例化这样一个默认的对象
			不指定viewname时，将会一url名作为视图名
			
	Spring MVC 支持HTTP缓存 (Cache-Control)
		HTTP缓存策略,决定何时缓存资源，缓存时间，有利于提升用户体验，加快加载速度，节省带宽资源
		Http缓存响应头 由服务器设定
			Cache-Control 
				帮助私有缓存（比如浏览器端缓存）和公共缓存（比如代理端缓存）
			Last-Modified
				
			ETag
				标识给定的URL下的内容有无变化
					客户端就可以在后续的GET请求中使用这个ETag头表示，一般是将它放在If-None-Match请求头中。
					此时若内容没有变化，服务器端会直接返回304: 内容未更改。
					
		1.Spring MVC在控制器中设置cache
			若控制器返回ResponseEntity
			可在ResponseEntity上配置cache
				ResponseEntity.
					ok().//响应状态
					cacheControl(CacheControl.maxAge(10, TimeUnit.MINUTES)).//设置缓存时间
					lastModified(1000).//设置lastModified头
					eTag("123456").//设置eTag标志头，用于决定需不需要更新缓存
					body(db);//返回到响应体中的model
			
		2.SPring mvc通过控制器的WebRequest 参数检测客户端的缓存是否已更改
			request.checkNotModified( lastModified )
				lastModified传入最后更改时间，与request头的If-Modified-Since比较
				//false--不用更改  true--需要更改
			或
			request.checkNotModified( eTag )
				方法会将传入的参数值与请求头'ETag'的值进行比较
				//false--不用更改  true--需要更改
			或
			request.checkNotModified(eTag, lastModified)
				同时比较lastMdified时间与ETag标志
				//false--不用更改  true--需要更改
				
			若资源未修改返回一个304响应状态码HTTP 304 Not Modified（资源未修改）
					
		3.Spring mvc对静态资源设置缓存
			xml:
				<mvc:resources mapping="/resources/**" location="/public-resources/">
					<mvc:cache-control max-age="3600" cache-public="true"/>
				</mvc:resources>
			JavaConfig类:
				继承WebMvcConfigurerAdapter
				重写addResourceHandlers(ResourceHandlerRegistry registry)
					registry.addResourceHandler("/resources/**")
					.addResourceLocations("/public-resources/")
					.setCacheControl(CacheControl.maxAge(1, TimeUnit.HOURS).cachePublic());
					
		web容器 创建弱ETag对象(只节省带宽，不省计算资源)
		它是纯Servlet技术实现的过滤器，因此，它可以与任何web框架无缝集成
		只要在web.xml下配置过滤器
			ShallowEtagHeaderFilter缓存JSP页面内容
			将缓存内容生成MD5的Hash作为ETag
			把ETag写入Response头的ETag中
			
			下次请求头If-None-Match写入ETag
			ShallowEtagHeaderFilter检测If-None-Match的etag1
			把jsp视图渲染得到etag2
			比较etag2=etag1?304(未修改):200
			
Spring MVC 用JavaConfig 初始化Servlet容器
	Servlet 3.0以上的环境下，你可以通过编程的方式来配置Servlet容器了
	WebApplicationInitializer <--- --- --- AbstractDispatcherServletInitializer
		AbstractDispatcherServletInitializer(ADSI)使DispatcherServlet配置变得更简单，
			1.你只需要覆写相应的方法
			2.在其中提供servlet映射
				getServletMappings()
			3.指定DispatcherServlet所需配置(javaconfig/xml)的位置
				JavaConfig:)
					getServletConfigClasses()	//web应用上下文
					getRootConfigClasses()		//web根上下文
				xml:)
					createServletApplicationContext()
			4.ADSI同样也提供了便捷的方式来添加过滤器Filter
				getServletFilters()
				
Spring MVC 启用MVC Java编程配置或MVC命名空间
	启用MVC:
		@Configuration
		@EnableWebMvc
		public class WebConfig(){}
		=======
		<mvc:annotation-driven/>
	默认注册的组件:
		RequestMappingHandlerMapping	//映射控制器
		RequestMappingHandlerAdapter	//调用控制器
		ExceptionHandlerExceptionResolver	//解析控制器异常
		支持对使用了@RequestMapping、@ExceptionHandler及其他注解的控制器方法的请求处理。