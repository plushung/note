体系结构：包括
	核心容器（Core Container）
		核心容器由核心，Bean，上下文和表达式语言模块组成
			核心提供基本组成部分，包括 IoC 和依赖注入功能
			Bean模块用工厂模式实现
			上下文它是访问定义和配置的任何对象的媒介。
			
	数据访问/集成（DataAccess/Integration）
		包括 JDBC，ORM，OXM，JMS 和事务处理模块
	Web
		由 Web，Web-MVC，Web-Socket 和 Web-Portlet 组成
	测试模块
		Test
	其他：
		AOP，Aspects，Instrumentation，Web


Spring IoC 容器
	容器将创建对象，连接对象（DI），配置对象，管理对象的整个生命周期从创建到销毁
	使用依赖注入，把对象组装成组件（Bean）

	BeanFactory 容器
		它可以加载配置文件中定义的 bean，将所有的 bean 集中在一起，当有请求的时候分配 bean
	ApplicationContext 容器
		COntext是spring的核心
		包含BeanFactory所有功能，
		另外增加了企业所需要的功能，比如，从属性文件从解析文本信息和将事件传递给所指定的监听器

	bean定义 @scope scope 指定作用域
	    基于 XML 的配置文件:<bean id="" class=""></bean>
	    基于注解的配置:启用<context:component-scan>,扫描基于注解的Bean
			       @Component：一个泛化的概念，表示一个组件（Bean），可作用在任何层次
   			       @Controller：用于对Controller实现类进行标注，目前该功能与Component相同
   			       @Repository：用于对DAO实现类进行标注
    			       @Service：用于对Service实现类进行标注，目前该功能与Component相同
	    基于 Java 的配置 :@Configuration 的注解类表示这个类可以作为 bean 定义的来源
				@Bean 的注解方法将返回一个对象，注册在 Spring 应用程序上下文中

Spring 依赖注入
	依赖注入有助于把这些类装配在一起，同时保持他们独立。 
	注入方式：
		基于构造函数
			<constructor-arg type="int" value="2001"/>注入直接值
			<constructor-arg  type="Integer" ref="beanId"/>注入引用的bean
		基于setter方法
			通过属性的setter方法设置值，name指定要设置的属性名
			<property name="spellChecker" ref="spellChecker"/>
			<property name="spellChecker" value="spellChecker"/>
	注入集合：
		<set>,<list>,<map>,<props>

Spring Beans 自动装配
	xml:<bean autowire="byName/byType/constructor">

Spring 基于注解的配置
	@Required 注释应用于 bean 属性的 setter 方法,表示必需配置属性值
	@Autowired 用于构造函数，Setter 方法，属性
	@Qualifier 注释，指定要注入的BeanId
	JSR-250 注解
		@PostConstruct， @PreDestroy 相当于initMethod和destoryMethod，用于方法上
		@Resource（name=“beanid”）=@autowire+@qualifier

spring的事件处理
	当加载 beans 时，ApplicationContext（上下文） 发布（产生）某些类型的上下文事件	
		ContextRefreshedEvent
		ContextStartedEvent 	使用 ConfigurableApplicationContext 接口中的 start() 方法启动 ApplicationContext 时，该事件被发布
		ContextStoppedEvent		使用 ConfigurableApplicationContext 接口中的 stop() 方法停止 ApplicationContext 时，该事件被发布
		ContextClosedEvent		close() 停止 ApplicationContext 时，发布这个事件
		RequestHandledEvent
	
	监听上下文事件
		ApplicationListener 接口用于监听上下文（context）事件, 只有一个方法onApplicationEvent()，处理事件

	把ApplicationListener配置成bean，context发布事件时，Listener Bean监听到并处理

Spring AOP
	跨一个应用程序的多个点的功能被称为 横切关注点 ，这些横切关注点在概念上独立于应用程序的业务逻辑。
	Aspect（方面）:独立于业务逻辑的功能模块
		如日志记录模块、审计模块、声明式事务模块、安全性模块和缓存模块等

	Advice(通知)：功能模块里待执行的具体方法

	Pointcut(切点)：业务逻辑程序上的某个位置，通常是某个方法
		在程序运行到切点时，在合适的时机使用通知
		
	通知（Advice）的类型：
		前置通知	before
		后置通知	after
		返回后通知	after-returning
		抛出异常后通知	after-throwing
		环绕通知	around

	AOP的配置实现	
		classpath下要包含以下AspectJ 库文件
    		aspectjrt.jar
		aspectjweaver.jar
		aspectj.jar
    		aopalliance.jar

		xml方式：
			<aop:config>
				<aop:aspect>
					<aop:pointcut>
					<aop:before>
			声明切面:在<aop:config>标签里配置
  				 <aop:aspect id="myAspect" ref="aBean">
				ref引用一个bean，用来作切面对象

			声明切点:在<aop:aspect>标签里配置
				<aop:pointcut id="businessService" 
					expression="execution(* com.tutorialspoint.Student.getName(..))"/>

			声明通知：在<aop:aspect>标签里配置
				<aop:before pointcut-ref="businessService"
					method = "adviceMethod">
				ref 引用一个切点businessService，在该切点调用该aspect的一个method：adviceMethod
		注解方式：
			xml配置文件要声明以下标签以启用@AspectJ
			<aop:aspectj-autoproxy/>
			声明切面:
				@Aspect
				public class AspectModule｛｝
			
			声明切点:
				@Pointcut("execution(* com.xyz.myapp.service.*.*(..))")
				private void businessService() {}
			
			声明通知:
				@After("businessService()")
   				public void afterAdvice()
				@Around("recordLog()")//around通知有一个ProceedingJoinPoint参数
    				public void around(ProceedingJoinPoint pjp)

Spring JDBC 框架
	JdbcTemple类:负责处理连接数据库时的所有的低层细节
		JdbcTemplate 类的实例是线程安全配置的

	存储过程（Stored Procedure）：
	是在大型数据库系统中，一组为了完成特定功能的SQL 语句集，存储在数据库中，
	经过第一次编译后再次调用不需要再次编译，用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。存储过程是数据库中的一个重要对象。

Spring 事务管理（commit，rollback。。。）
	事务的四个关键属性说成是 ACID
	原子性
	一致性
	隔离性
	持久性

	用SQL执行一个事务的流程:
		使用 begin transaction 命令开始事务。
		使用SQL执行CRUD操作
		所有SQL操作都成功则commit or rollback
	
	局部事物 vs. 全局事务

	Spring 支持两种类型的事务管理:
		编程式事务管理 ：这意味着你在编程的帮助下有管理事务。这给了你极大的灵活性，但却很难维护。
			将事务管理与业务代码DAO编写在一块
    		声明式事务管理 ：这意味着你从业务代码中分离事务管理。你仅仅使用注释或 XML 配置来管理事务。
			从业务代码中分离事务管理，仅仅使用注释或 XML 配置来管理事务，是非侵入式，不会影响业务逻辑的实现。

	Spring 支持使用 Spring AOP 框架的声明式事务管理。声明式事务管理比编程式事务管理更可取
	即将事务模块声明为Aspect，运用AOP的方式管理事务

	Spring 事务抽象：
		PlatformTransactionManager 接口
		TransactionDefinition 是在 Spring 中事务支持的核心接口
		TransactionStatus 接口为事务代码提供了一个简单的方法来控制事务
	声明式事务：
		一种为通过使用Spring的<tx:advice>定义事务通知与AOP相关配置实现，
			
		另为一种通过@Transactional实现事务管理实现
	continue。。。。。。。。。。。。。。。。。。。。。。。。。

