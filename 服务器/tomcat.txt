Tomcat
目录结构
	/bin : tomcat的一些可运行的服务组件，启动和停止服务等批处理文件
	/conf :配置文件和一些相关的DTD文件,最重要的是 server.xml. 它是这个容器最主要的配置文件
	/logs : 日志文件会打印到这里
	/webapps : 应用程序部署的地方
	
架构
	Server容器：	StandardServer
		代表tomcat的运行实例，1个JVM只含1个Server
		Server有多个Service，每个Service代表一个服务器实例，负责调用Container接口
		Server有一个GlobalNamingResources 组件，用于定义全局（tomcat下的）JNDI资源
		Server有多个Listener 组件，方便拓展
		
	Service容器:	StandardService
		Server的组成，Service的实现类为StandardService，
		Service有多个Connector用于接收客户端消息
		Service有1个Engine处理Connector发来的消息
		Service包含多个Executor为各个组件提供线程池
			Executor  其中的execute(Runnable)方法把任务加入到任务队列中
				线程池:初始化若干个工作线程，并启动
				工作线程:从任务队列中取得Runnable任务，并执行
				任务队列:保存着待执行的Runnable任务
		
	Connector：
		连接器，他被注册到Service上，每个Service有多个Connector，负责处理Service与client的通信，把用户请求包装成标准的Http请求或AJP请求
		当Service实例收到请求，通过合适的Connector将请求发给Engine容器，Engine容器首先接收到请求
		HTTP connector :
			处理Http协议的通信
		AJP connector :
			处理Ajp协议的通信
			
	从Engine开始对请求消息进行处理，所以Engine及子容器都有一个Pipeline组件对请求进行处理
	
	Engine容器:	StandardEngine
		代表一个Service的全局Servlet引擎，每个Service有一个Engine，可以处理同一Service的多个连接器发来的请求，并下发请求给合适的Host容器
		实现Engine interface自定义Engine,
		
	Host容器:		StandardHost
		一个Host代表一个虚拟主机，表示一个服务器主机，Engine中包含多个Host
		 StandardHost提供了默认实现
	
	Context容器:	StandardContext
		一个Web应用程序抽象，为Web应用程序部署到Tomcat中运行时，会转化为Context对象，
		同一台主机包含多个Context，即包含多个应用程序，可通过实现Context interface自定义上下文的实现， StandardContext已经提供了默认实现
	
	Wrapper容器
		一个Servlet的容器，每个Wrapper容器有一个对应的Servlet对象对请求进行逻辑处理，Wrapper组件调用Servlet的方法处理请求
		Context中有多个Wrapper容器
		
	Container：
		容器，引擎(Engine)容器、主机(Host)容器、上下文(Context)容器和Wraper容器均继承自Container接口，
		继承关系Context（Host（Engine）），Engine为顶层父类。
	
	
	功能模块划分
		Jsper模快:
			将JSP页面动态转换为java代码（servlet）并编译成class文件
		Servlet和Jsp模块:
			实际处理用户请求的业务逻辑
		Catalina模块:
			定义架构中各个部分的实现，规范tomcat开始与停止事件的执行流程
		Connector模块:
			它接收用户的请求，并把用户请求包装成标准的Http请求
		Resource模块：
			tomcat中的资源文件，配置文件

Connector组件
	<Connector 
		connectionTimeout="20000" 
		maxHttpHeaderSize="1000" 
		port="8080" 
		protocol="HTTP/1.1" 		//使用的通信协议，在6种Protocol类中选择
		redirectPort="8443"/>
		tomcat的connector负责处理不同通信协议的通信连通性
	两种协议
		Http1.1协议
		Ajp协议
	三种模式
		BIO:java BIO模式，阻塞模式，不能轮询处理socket，无Poller
		NIO:java NIO模式，非阻塞模式，轮询处理Socket，套接字终端有Poller组件来轮询处理连接
		APR:本地代码实现的NIO摸式，非阻塞，轮询处理Socket
	
	6种protocol
		Http11Protocol
		Http11NioProtocol
		Http11AprProtocol
		Ajp11Protocol
		Ajp11NioProtocol
		Ajp11AprProtocol
		不同协议类的connector处理tomcat中不同协议在不同模式下的请求。
		
		*protocol组成
			1.套接字接收终端Endpoint
				Endpoint组件负责启动端口与监听客户端请求，接收套接字，创建ScoketProcessor处理套接字由Executor中的线程处理，Executor可以是公有的也可以是私有的
			2.协议解析器Processor
				SocketProcessor中的Processor的具体实现
				解析Endpoint发来的套接字，包括读写和过滤套接字、解析协议并生成请求对象Request、生成协议的响应对象Response
				
			！Processor解析完套接字后，将Request对象通过Connector组件的CoyoteAdaptor组件发送给Engine容器处理，
			！Engine处理完请求后通过Adaptor返回Response给Connector，让Connector将响应送回给客户端
			!connector与Engine的连接用的是适配器设计模式，实现不同类的通信
	
	配置不同的Protocol
		<Connector protocol=“*.*.Http11Protocol”>
		在connector节点的protocol属性指定使用哪种协议类处理连接

Engine组件
	从Engine组件开始，到Wrapper组件，Connector组件发来的Request对象将通过一系列PipeLine组件进行处理并传递，属于管道设计模式。
		
Context
	Context代表一个应用，通过<Context>或Context.xml定义一个应用的资源和运行环境
	context查找顺序1-5
	1$CATALINA_HOME/conf/context.xml:！！！！！
		全局Context，所有web应用的根上下文，不同Host的不同Web应用都继承根上下文的配置，全局可见
		
	2$CATALINA_HOME/conf/Catalina/localhost/context.xml.default:
		!!!! 文件名一定是context.xml.default
		主机Context，同一主机下的所有Web应用可见
		
	3$CATALINA_HOME/conf/Catalina/localhost/AppName.xml:
		应用Context，只有localhost的当前应用AppName应用可见
		
	4 myWeb/META-INF/context.xml
		本地Context，只有当前应用可用，作用范围为本应用
		
	5 Server.xml的<Context>节点
		本地Context，只有当前应用可用
		
server.xml
	Server根据该文件创建Server容器
	配置内容
		<GlobalNamingResources>:全局JNDI资源,server范围
		<Service>  :Service容器 多个
			<Connector>:连接器 多个
			<Engine name="Catalina" defaultHost="localhost">:引擎 一个，还可以指定jvmRoute属性，不同引擎不同jvm，实现负载均衡
			<Host> :主机 appBase指定该主机存放应用程序根目录的目录
			<Context>:应用上下文 docBase指定appBase下某应用程序的根目录
			
Tomcat Manager
	管理tomcat服务器应用
	出于安全考虑，用manager应用管理web的部署，要验证用户身份
	角色
		manager-gui 	能够访问 HTML 界面。
		manager-status 	只能访问“服务器状态”（Server Status）页面。
		manager-script 	能够访问文档中描述的适用于工具的纯文本界面，以及“服务器状态”页面。
		manager-jmx 	能够访问 JMX 代理界面以及“服务器状态”（Server Status）页面。
		可在$CATALINA_BASE/conf/tomcat-users.xml，给用户授予角色，
			<role rolename="manager-jmx"/>
			<user roles="tomcat" password="619904620" username="tomcat"/>
		1建议永远不要将 manager-script 或 manager-jmx 角色授予那些拥有 manager-gui 角色的用户，以防CSRF攻击
		
	通过IP地址或主机限制访问
		Manager 还可以配置 RemoteAddrValve 和 RemoteHostValve，别通过 远程 IP 地址 或远程主机名来进行限制访问
		在manager的Meta-inf/context.xml下添加<Valve>标签，使用org.apache.catalina.valves.RemoteAddrValve类，加上IP地址访问限制
			<Valve className="org.apache.catalina.valves.RemoteAddrValve"
                allow="127\.0\.0\.1"/>
	
	查看服务器状态入口:
		命令
			localhost:8080/manager/status：服务器信息
				信息包括:OS,JVM,Application,Connector
				参数：
					XML=true，以xml形式显示
	manager-script角色
		在url中通过url命令的形式管理tomcat应用的部署
		管理入口:
			localhost:8080/manager/text/｛Command｝?｛parameters｝
		命令
			list：列出当前已部署的应用
			serverinfo：列出OS与JVM的状态
			start：开启path的应用
			stop:停止path的应用
			undeploy：取消path的应用的部署
			vminfo:虚拟机信息
			expire:会话统计，并可使会话过期
				参数
					path:指定项目
					idle:指定会话过期时间，使大于该时间的会话过期
			sessions:会话统计
				参数：
					path:/examples 要统计的项目访问路径（必需）
			resources:列出可能的全局 JNDI 资源
				参数：
					type:要找的资源的类名
			reload:重新加载应用
				参数：	
					path:应用访问路径
			deploy:部署应用
				参数：
					path：应用的访问路径名
					war:应用来源,war或file,（file:path/app为文件路径，没有file则相对<Host>的appBase路径）
					config:指定应用的上下文context.xml位置， host要开启deployXML=true
						使用config指定Context.xml就不用配置path参数，因为Context.xml已经配置了path
						
		

部署事项
	<Host>的unpackWars
		会键war文件解压后，将解压文件放置在appBase下
	
访问安全
	tomcat对用户进行认证
		1.收集用户凭证信息
		2.对凭证鉴权，看用户有无访问权限
	Realm+验证模式
	Realm:保存用户及密码及用户角色
	xxxAuthenticator：认证器，不同认证模式用不同认证器
		认证模式
			Http规范的认证模式
				Basic模式	在http报文头添加www-authenticate属性，对用户认证信息用Basic64编码后添加到www-authenticate属性后面
				Digest模式	在http报文头添加www-authenticate属性
			From模式
			Spnego模式
			SSL模式
				基于SSL安全通信协议
			NonLogin模式
			
	在web.xml中对指定的url加认证
		
	
	流程
		1客户端请求访问某资源
		2.某资源添加了认证
		3.客户端发送身份信息
		4.服务器配置好的认证器从Realm域中取得该用户的信息及角色，并判断该用户是否有访问权限
		
	
	
Realm组件 （Engine作用域，Host作用域，Context作用域）
	Realm（安全域）其实就是一个存储用户名和密码及角色的“数据库”再加上一个枚举列表。配合tomcat资源认证模块使用
	存储方式可以是内存，xml（conf/tomcat-users.xml），数据库
	提供了 6 种标准插件，支持与各种验证信息源的连接。决定从那取得验证信息
		JDBCRealm 通过JDBC访问数据库取得验证信息
		DataSourceRealm 通过直接访问配置好的数据源取得验证信息
		UserDatabaseRealm――访问存储在一个 UserDatabase JNDI 数据源中的认证信息，
			通常依赖一个 XML 文档（conf/tomcat-users.xml）。（默认）
		MemoryRealm――访问存储在一个内存中对象集合中的认证信息，
			通过 XML 文档初始化（conf/tomcat-users.xml）
			
	在Server.xml中添加Realm标签
		<Realm>标签下定义安全域，className属性指定用6种安全域中的哪一种
		<Realm className="org.apache.catalina.realm.UserDatabaseRealm" resourcename="UserDatabase">
		resourcename指定存放用户信息的数据源
		
Tomcat 运行安全管理	
	决定哪些程序对tomcat下的哪些文件有哪些action（read，write），策略文件为conf/catalina.policy
		grant
			[codeBase 程序名](可选)
		{permission 权限类 
			[限制访问的资源][，限制访问的动作];(可选) };
		
		grant 
			codeBase "file:${catalina.home}/bin/bootstrap.jar" 
		{permission java.security.AllPermission;
			};
		
	使用SecurityManager启动Tomcat实施运行安全策略
		启动catalina时加上-sercurity选项
		%CATALINA_HOME%\bin\catalina start -security 

TomcatＪＮＤＩ资源
	NamingContextListener监听器
		创建NamingResource资源，并绑定到Context

	定义JNDI资源
		GlobalNamingResources
			Server全局的命名资源，在Server.xml中<GlobalNamingResources>中添加<Resource>
			全局资源要在Context中进行连接才可一使用，在server.xml或context.xml<context>中添加<ResourceLink>对全局资源引用
			<ResourceLink name="jdbc/GlobaldasM" global="jdbc/GlobaldasM" type="javax.sql.DataSource"/>
		NamingResource
			Context的命名资源,在Server.xml或Context.xml的<Context>标签下添加<Resource>来定义命名资源，
			
		<Resource>的属性
			name:JNDI资源名
			auth：是连接池管理权属性，Container表示容器管理，Application表示应用管理
			type:资源的类型
			factory:通过工厂类取得type类型的资源
			singleton:资源是否为单例
			
			定义数据源资源的属性
				maxTotal="100" 			//最大线程数
				maxIdle="30" 			//最大空闲线程
				maxWaitMillis="10000"		//最大等待时间
				username="javauser" 
				password="javadude" 
				driverClassName="com.mysql.jdbc.Driver"
				url="jdbc:mysql://localhost:3306/javatest"
			
	app引用资源
		在应用的Web.xml里添加<resource-ref>对全局资源引用，
		context局部NamingResources定义后不用<resource-ref>来引用
		<resource-ref>   
			<description>DB Connection1</description>   
			<res-ref-name>jdbc/GlobaldasM</res-ref-name>   
			<res-type>javax.sql.DataSource</res-type>   
			<res-auth>Container</res-auth>   
		</resource-ref> 
		
	容器管理的事务
		在<Context>下添加<Transaction>标签定义资源工厂，定义UserTransaction资源，通过java:comp/UserTransaction取得事务
	
	使用资源
		initalContext对象的lookup("naming")方法取得JNDI资源
		
	Spring引用JNDI
		<jee:jndi-lookup id="dataSource" jndi-name="jdbc/mysql" /> 
		
异步Servlet
	每个请求有相应的Wrapper容器处理，处理请求的那个Wrapper容器从何Service的Excutor中取得线程来处理请求
	具体的业务逻辑的处理交由Servlet处理，在Servlet处理时一直占用Excutor的线程。
	当Servlet的业务逻辑非常耗时，将会长时间占用Excutor的线程，给服务器带来极大的性能损耗
	解决
		使用异步的Servlet
			请求到达Servlet后，创建AsynContext交给用户自定义一个线程来处理耗时的业务逻辑，servlet不用等待处理是否完成，立即返回，归还Excutor的线程
			当用户自定义的线程处理完业务逻辑后，再将响应返回给客户端
			Request对象和Response对象将保存在异步上下文中，由用户定义的程处理。
		tomcat配置开启异步servlet
			在Servlet标签下添加<async-supported>true</async-supported>开启异步
		servlet中的具体实现
			创建AsynContext:
				AsynContext ac=request.startAsync(request,response);
			自定义线程处理AsynContext中的请求
				myThread(ac){
					run(){
						request=ac.getRequest()
						response=ac.getResponse()
						response.getWriter().print("message").flush()
					}
				}

				
				
多服务器的集群通信
	在多服务器系统中，同一客户端的请求可能随机发送到不同的节点处理，tomcat通过Session对象来识别不同的客户会话，在集群通信时，要解决Session的共享问题，
	即在服务器集群中同步每个节点的Session，以确保不同节点能为同一个会话提供服务。
	Cluster组件
		功能
			1负责tomcat中会话的复制（会话数据集群同步）
			2上下文属性的复制
			3集群下的Web应用部署
		默认的实现类
			SimpleTcpCluster
			
	处理
		通过Engine或Host的Pipeline中的阀门执行Cluster组件
		ReplicationValve阀门	
			调用Cluster组件，进行会话数据集群同步

	集群级别
		Engine级别，Host级别
		分别在Engine或Host节点下添加<Cluster>节点，
		那么在他们各自的数据处理管道中会添加一个ReplicationValve阀门实现Cluster的功能
		
类加载机制
	JDK的类加载器
		加载顺序-父到子：
			Bootstrap ClassLoader		加载jre/lib的*.jar
			Extension ClassLoader		加载jre/lib/ext的*.jar
			System ClassLoader		加载应用的ClassPath指定类库的*.jar
			UserApp ClassLoader		用户自定义的ClassLoader
	Tomcat的类加载器
		加载顺序-父到子：
			Bootstrap ClassLoader		加载jre/lib的*.jar
			Extension ClassLoader		加载jre/lib/ext的*.jar
			System ClassLoader		加载应用的ClassPath指定类库的*.jar
			Common Classloder		tomcat的服务器类加载器，加载$CATALINA_BASE/lib和$CATALINA_HOME/lib的Class与jar
			UserApp ClassLoader		用户自定义的ClassLoader
	
	双亲委派模型
		类加载器加载类时先委派给父类加载加载，若父类加载器不能加载该类，才自己加载
		
	全盘负责机制
		类加载器加载某类时，该类所依赖的其他类，所引用的其他类也由该类加载器一并加载
		
	加载过程
		加载器加载类------->有无该class的缓存----->Yes--->返回Class
								 ----->No----->看有无父类加载器------>Yes----->父类加载器加载该类---->成功加载---->返回Class
																		   ---->没找到类----->ClassNotFoundException
																		   
Tomcat JSPs------JSP编译器-----Jasper
	Tomcat 8.0 使用 Jasper 2 JSP 引擎去实现 JavaServer Pages 2.3 规范。 
	

	
